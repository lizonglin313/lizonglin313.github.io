<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lizonglin313.github.io/</id>
    <title>Big Carrot</title>
    <updated>2021-01-23T11:43:04.867Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lizonglin313.github.io/"/>
    <link rel="self" href="https://lizonglin313.github.io/atom.xml"/>
    <subtitle>人们依然相信 什么未来会更精彩</subtitle>
    <logo>https://lizonglin313.github.io/images/avatar.png</logo>
    <icon>https://lizonglin313.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Big Carrot</rights>
    <entry>
        <title type="html"><![CDATA[Golang常用工具]]></title>
        <id>https://lizonglin313.github.io/post/golang-chang-yong-gong-ju</id>
        <link href="https://lizonglin313.github.io/post/golang-chang-yong-gong-ju">
        </link>
        <updated>2021-01-23T11:35:32.000Z</updated>
        <content type="html"><![CDATA[<p>一般格式：<code>go command [arguments]</code></p>
<h3 id="build">build</h3>
<ul>
<li>
<p><code>build</code></p>
<p>最常用的命令，用来编译go文件</p>
<p>跨平台编译，如<code>env GOOS=linux GOARCH=amd64 go build</code>在Linux系统、amd64架构编译</p>
</li>
</ul>
<h3 id="install">install</h3>
<ul>
<li>
<p><code>install</code></p>
<p>同为编译，和<code>build</code>的不同在于编译后会将输出文件打包成库放在pkg下面</p>
</li>
</ul>
<h3 id="get">get</h3>
<ul>
<li>
<p><code>get</code></p>
<p>用于获取go第三方包，默认从git repo获取最新版本，如<code>go get -u github.com/go-sql-driver/mysql</code></p>
</li>
</ul>
<h3 id="fmt">fmt</h3>
<ul>
<li>
<p><code>fmt</code></p>
<p>统一代码风格，<code>go fmt</code></p>
</li>
</ul>
<h3 id="test">test</h3>
<ul>
<li>
<p><code>test</code></p>
<p>运行当前包目录下的test，如<code>go test</code>或<code>go test -v</code>，test文件命名是<code>xxx_test.go</code></p>
</li>
</ul>
<p>关于写test case：</p>
<ul>
<li>
<p>test命名为<code>TestXxxx</code></p>
</li>
<li>
<p>test case 的参数为：<code>t *testing.T</code> 或者 <code>b *testing.B</code> (用于测试性能)</p>
</li>
<li>
<p><code>t.Errorf()</code> 用于打印错误信息，同时跳过整个test case</p>
</li>
<li>
<p><code>t.SkipNow()</code> 为跳过当前test，并且直接处理下一个test case，要写在test case的第一行</p>
</li>
<li>
<p><code>t.Run()</code> 来执行subtests，可以做到控制test输出以及test的顺序</p>
</li>
<li>
<p><code>TestMain(m *testing.M)</code> 初始化test，使用<code>m.Run()</code>来调用其他tests，可以用来完成一些初始化；如果没有调用<code>m.Run()</code>，那么处了TestMain以外其他的tests就不会被执行</p>
</li>
</ul>
<p>关于benchmark：</p>
<ul>
<li>benchmark函数一般以Benchmark开头，如<code>BenchmarkXxx</code></li>
<li>参数为： <code>b *testing.B</code></li>
<li>每次执行一般会跑<code>b.N</code>次</li>
<li>在执行过程中根据实际case的执行时间是否稳定来调整<code>b.N</code>的次数直至稳定</li>
<li>命令行中，命令为：<code>go test -bench=.</code></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fabric2.X_fabric-samples_test-network解读]]></title>
        <id>https://lizonglin313.github.io/post/fabric2x_fabric-samples_test-network-jie-du</id>
        <link href="https://lizonglin313.github.io/post/fabric2x_fabric-samples_test-network-jie-du">
        </link>
        <updated>2021-01-21T12:41:47.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Fabric2.X中，<code>fabric-samples</code>将作为Fabric1.X中的<code>first-network</code>的替代。也就是说，在2.X版本及以后，使用<code>fabric-samples</code>作为fabric的测试网络了。</p>
</blockquote>
<p>在配置好基本环境之后，来看一下它为我们提供了哪些内容。</p>
<h2 id="目录结构">目录结构</h2>
<pre><code class="language-shell">root@lizonglin-virtual-machine:/home/lizonglin/GoWork/src/github.com/fabric/scripts/fabric-samples# ll
total 100
drwxr-xr-x 15 lizonglin lizonglin  4096 1月  21 10:55 ./
drwxr-xr-x  3 lizonglin lizonglin  4096 1月  21 10:17 ../
drwxr-xr-x  2 lizonglin lizonglin  4096 10月  1 03:52 bin/
drwxr-xr-x  8 lizonglin lizonglin  4096 1月  21 10:55 chaincode/
drwxr-xr-x  3 lizonglin lizonglin  4096 1月  21 10:55 chaincode-docker-devmode/
drwxr-xr-x  4 lizonglin lizonglin  4096 1月  21 10:55 ci/
-rw-r--r--  1 lizonglin lizonglin   597 1月  17 18:50 CODE_OF_CONDUCT.md
-rw-r--r--  1 lizonglin lizonglin   109 1月  17 18:50 CODEOWNERS
drwxr-xr-x  3 lizonglin lizonglin  4096 1月  21 10:55 commercial-paper/
drwxr-xr-x  2 lizonglin lizonglin  4096 10月  1 02:41 config/
-rw-r--r--  1 lizonglin lizonglin   935 1月  17 18:50 CONTRIBUTING.md
drwxr-xr-x  5 lizonglin lizonglin  4096 1月  21 10:55 fabcar/
drwxr-xr-x  6 lizonglin lizonglin  4096 1月  21 11:24 first-network/
drwxr-xr-x  8 lizonglin lizonglin  4096 1月  21 10:55 .git/
-rw-r--r--  1 lizonglin lizonglin   189 1月  21 10:55 .gitignore
drwxr-xr-x  4 lizonglin lizonglin  4096 1月  21 10:55 high-throughput/
drwxr-xr-x  4 lizonglin lizonglin  4096 1月  21 10:55 interest_rate_swaps/
-rw-r--r--  1 lizonglin lizonglin 11358 1月  17 18:50 LICENSE
-rw-r--r--  1 lizonglin lizonglin  1644 1月  21 10:55 MAINTAINERS.md
drwxr-xr-x  2 lizonglin lizonglin  4096 1月  21 10:55 off_chain_data/
-rw-r--r--  1 lizonglin lizonglin  1694 1月  21 10:55 README.md
-rw-r--r--  1 lizonglin lizonglin  1035 1月  17 18:50 SECURITY.md
drwxr-xr-x  8 lizonglin lizonglin  4096 1月  21 18:52 test-network/
</code></pre>
<p>fabric-samples的目录结构如下，可以看到还是暂时为我们保留了first-network，但是新版的启动网络脚本则是在test-network中。</p>
<pre><code class="language-shell">root@lizonglin-virtual-machine:/home/lizonglin/GoWork/src/github.com/fabric/scripts/fabric-samples/test-network# ll
total 68
drwxr-xr-x  8 lizonglin lizonglin  4096 1月  21 18:52 ./
drwxr-xr-x 15 lizonglin lizonglin  4096 1月  21 10:55 ../
drwxr-xr-x  4 lizonglin lizonglin  4096 1月  21 10:55 addOrg3/
drwxr-xr-x  2 lizonglin lizonglin  4096 1月  21 10:55 configtx/
drwxr-xr-x  2 lizonglin lizonglin  4096 1月  21 10:55 docker/
-rw-r--r--  1 lizonglin lizonglin    69 1月  17 18:50 .env
-rw-r--r--  1 lizonglin lizonglin   349 1月  21 10:55 .gitignore
-rwxr-xr-x  1 lizonglin lizonglin 20570 1月  21 10:55 network.sh*
drwxr-xr-x  4 lizonglin lizonglin  4096 1月  21 20:05 organizations/
-rw-r--r--  1 lizonglin lizonglin   788 1月  21 10:55 README.md
drwxr-xr-x  3 lizonglin lizonglin  4096 1月  21 10:55 scripts/
drwxr-xr-x  2 lizonglin lizonglin  4096 1月  21 20:05 system-genesis-block/
</code></pre>
<h2 id="networksh">network.sh</h2>
<p>其中，network.sh*即启动脚本，在新的脚本中，为我们进行了大量的配置工作，使得新版本的脚本很长，省略一些不必要的内容：</p>
<pre><code class="language-shell">#!/bin/bash
# 首先是一些说明：
# 两个组织，每个组织一个peer节点
# 一个使用Raft单节点的排序服务
# This script brings up a Hyperledger Fabric network for testing smart contracts
# and applications. The test network consists of two organizations with one
# peer each, and a single node Raft ordering service. Users can also use this
# script to create a channel deploy a chaincode on the channel
#
# prepending $PWD/../bin to PATH to ensure we are picking up the correct binaries
# this may be commented out to resolve installed version of tools if desired
export PATH=${PWD}/../bin:${PWD}:$PATH
export FABRIC_CFG_PATH=${PWD}/configtx
export VERBOSE=false

# Print the usage message
function printHelp() {
  echo &quot;Usage: &quot;
  echo &quot;  network.sh &lt;Mode&gt; [Flags]&quot;
  echo &quot;    &lt;Mode&gt;&quot;
  echo &quot;      - 'up' - bring up fabric orderer and peer nodes. No channel is created&quot;
  echo &quot;      - 'up createChannel' - bring up fabric network with one channel&quot;
  echo &quot;      - 'createChannel' - create and join a channel after the network is created&quot;
  echo &quot;      - 'deployCC' - deploy the fabcar chaincode on the channel&quot;
  echo &quot;      - 'down' - clear the network with docker-compose down&quot;
  echo &quot;      - 'restart' - restart the network&quot;
  echo
  echo &quot;    Flags:&quot;
  echo &quot;    -ca &lt;use CAs&gt; -  create Certificate Authorities to generate the crypto material&quot;
  echo &quot;    -c &lt;channel name&gt; - channel name to use (defaults to \&quot;mychannel\&quot;)&quot;
  echo &quot;    -s &lt;dbtype&gt; - the database backend to use: goleveldb (default) or couchdb&quot;
  echo &quot;    -r &lt;max retry&gt; - CLI times out after certain number of attempts (defaults to 5)&quot;
  echo &quot;    -d &lt;delay&gt; - delay duration in seconds (defaults to 3)&quot;
  echo &quot;    -l &lt;language&gt; - the programming language of the chaincode to deploy: go (default), java, javascript, typescript&quot;
  echo &quot;    -v &lt;version&gt;  - chaincode version. Must be a round number, 1, 2, 3, etc&quot;
  echo &quot;    -i &lt;imagetag&gt; - the tag to be used to launch the network (defaults to \&quot;latest\&quot;)&quot;
  echo &quot;    -verbose - verbose mode&quot;
  echo &quot;  network.sh -h (print this message)&quot;
  echo
  echo &quot; Possible Mode and flags&quot;
  echo &quot;  network.sh up -ca -c -r -d -s -i -verbose&quot;
  echo &quot;  network.sh up createChannel -ca -c -r -d -s -i -verbose&quot;
  echo &quot;  network.sh createChannel -c -r -d -verbose&quot;
  echo &quot;  network.sh deployCC -l -v -r -d -verbose&quot;
  echo
  echo &quot; Taking all defaults:&quot;
  echo &quot;	network.sh up&quot;
  echo
  echo &quot; Examples:&quot;
  echo &quot;  network.sh up createChannel -ca -c mychannel -s couchdb -i 2.0.0&quot;
  echo &quot;  network.sh createChannel -c channelName&quot;
  echo &quot;  network.sh deployCC -l javascript&quot;
}
# 清理docker容器
# Obtain CONTAINER_IDS and remove them
# TODO Might want to make this optional - could clear other containers
# This function is called when you bring a network down
function clearContainers() {
  CONTAINER_IDS=$(docker ps -a | awk '($2 ~ /dev-peer.*/) {print $1}')
  if [ -z &quot;$CONTAINER_IDS&quot; -o &quot;$CONTAINER_IDS&quot; == &quot; &quot; ]; then
    echo &quot;---- No containers available for deletion ----&quot;
  else
    docker rm -f $CONTAINER_IDS
  fi
}
# 删除docker镜像
# Delete any images that were generated as a part of this setup
# specifically the following images are often left behind:
# This function is called when you bring the network down
function removeUnwantedImages() {
  DOCKER_IMAGE_IDS=$(docker images | awk '($1 ~ /dev-peer.*/) {print $3}')
  if [ -z &quot;$DOCKER_IMAGE_IDS&quot; -o &quot;$DOCKER_IMAGE_IDS&quot; == &quot; &quot; ]; then
    echo &quot;---- No images available for deletion ----&quot;
  else
    docker rmi -f $DOCKER_IMAGE_IDS
  fi
}

# Versions of fabric known not to work with the test network
BLACKLISTED_VERSIONS=&quot;^1\.0\. ^1\.1\. ^1\.2\. ^1\.3\. ^1\.4\.&quot;

# 这里检查一下现有的二进制文件以及镜像是否可用，免得后续出现问题
# Do some basic sanity checking to make sure that the appropriate versions of fabric
# binaries/images are available. In the future, additional checking for the presence
# of go or other items could be added.
function checkPrereqs() {
  ## Check if your have cloned the peer binaries and configuration files.
  peer version &gt; /dev/null 2&gt;&amp;1

  if [[ $? -ne 0 || ! -d &quot;../config&quot; ]]; then
    echo &quot;ERROR! Peer binary and configuration files not found..&quot;
    echo
    echo &quot;Follow the instructions in the Fabric docs to install the Fabric Binaries:&quot;
    echo &quot;https://hyperledger-fabric.readthedocs.io/en/latest/install.html&quot;
    exit 1
  fi
  # 检查docker镜像以及二进制文件是否匹配
  # use the fabric tools container to see if the samples and binaries match your
  # docker images
  LOCAL_VERSION=$(peer version | sed -ne 's/ Version: //p')
  DOCKER_IMAGE_VERSION=$(docker run --rm hyperledger/fabric-tools:$IMAGETAG peer version | sed -ne 's/ Version: //p' | head -1)

  echo &quot;LOCAL_VERSION=$LOCAL_VERSION&quot;
  echo &quot;DOCKER_IMAGE_VERSION=$DOCKER_IMAGE_VERSION&quot;

  if [ &quot;$LOCAL_VERSION&quot; != &quot;$DOCKER_IMAGE_VERSION&quot; ]; then
    echo &quot;=================== WARNING ===================&quot;
    echo &quot;  Local fabric binaries and docker images are  &quot;
    echo &quot;  out of  sync. This may cause problems.       &quot;
    echo &quot;===============================================&quot;
  fi

  for UNSUPPORTED_VERSION in $BLACKLISTED_VERSIONS; do
    echo &quot;$LOCAL_VERSION&quot; | grep -q $UNSUPPORTED_VERSION
    if [ $? -eq 0 ]; then
      echo &quot;ERROR! Local Fabric binary version of $LOCAL_VERSION does not match the versions supported by the test network.&quot;
      exit 1
    fi

    echo &quot;$DOCKER_IMAGE_VERSION&quot; | grep -q $UNSUPPORTED_VERSION
    if [ $? -eq 0 ]; then
      echo &quot;ERROR! Fabric Docker image version of $DOCKER_IMAGE_VERSION does not match the versions supported by the test network.&quot;
      exit 1
    fi
  done
}

# 下面简单介绍了cryptogen这个工具以及CA
# Before you can bring up a network, each organization needs to generate the crypto
# material that will define that organization on the network. Because Hyperledger
# Fabric is a permissioned blockchain, each node and user on the network needs to
# use certificates and keys to sign and verify its actions. In addition, each user
# needs to belong to an organization that is recognized as a member of the network.
# You can use the Cryptogen tool or Fabric CAs to generate the organization crypto
# material.

# By default, the sample network uses cryptogen. Cryptogen is a tool that is
# meant for development and testing that can quicky create the certificates and keys
# that can be consumed by a Fabric network. The cryptogen tool consumes a series
# of configuration files for each organization in the &quot;organizations/cryptogen&quot;
# directory. Cryptogen uses the files to generate the crypto  material for each
# org in the &quot;organizations&quot; directory.

# You can also Fabric CAs to generate the crypto material. CAs sign the certificates
# and keys that they generate to create a valid root of trust for each organization.
# The script uses Docker Compose to bring up three CAs, one for each peer organization
# and the ordering organization. The configuration file for creating the Fabric CA
# servers are in the &quot;organizations/fabric-ca&quot; directory. Within the same diectory,
# the &quot;registerEnroll.sh&quot; script uses the Fabric CA client to create the identites,
# certificates, and MSP folders that are needed to create the test network in the
# &quot;organizations/ordererOrganizations&quot; directory.

# Create Organziation crypto material using cryptogen or CAs
function createOrgs() {

  if [ -d &quot;organizations/peerOrganizations&quot; ]; then
    rm -Rf organizations/peerOrganizations &amp;&amp; rm -Rf organizations/ordererOrganizations
  fi

  # Create crypto material using cryptogen
  if [ &quot;$CRYPTO&quot; == &quot;cryptogen&quot; ]; then
    which cryptogen
    if [ &quot;$?&quot; -ne 0 ]; then
      echo &quot;cryptogen tool not found. exiting&quot;
      exit 1
    fi
    echo
    echo &quot;##########################################################&quot;
    echo &quot;##### Generate certificates using cryptogen tool #########&quot;
    echo &quot;##########################################################&quot;
    echo

    echo &quot;##########################################################&quot;
    echo &quot;############ Create Org1 Identities ######################&quot;
    echo &quot;##########################################################&quot;

    set -x
    cryptogen generate --config=./organizations/cryptogen/crypto-config-org1.yaml --output=&quot;organizations&quot;
    res=$?
    set +x
    if [ $res -ne 0 ]; then
      echo &quot;Failed to generate certificates...&quot;
      exit 1
    fi

    echo &quot;##########################################################&quot;
    echo &quot;############ Create Org2 Identities ######################&quot;
    echo &quot;##########################################################&quot;

    set -x
    cryptogen generate --config=./organizations/cryptogen/crypto-config-org2.yaml --output=&quot;organizations&quot;
    res=$?
    set +x
    if [ $res -ne 0 ]; then
      echo &quot;Failed to generate certificates...&quot;
      exit 1
    fi

    echo &quot;##########################################################&quot;
    echo &quot;############ Create Orderer Org Identities ###############&quot;
    echo &quot;##########################################################&quot;

    set -x
    cryptogen generate --config=./organizations/cryptogen/crypto-config-orderer.yaml --output=&quot;organizations&quot;
    res=$?
    set +x
    if [ $res -ne 0 ]; then
      echo &quot;Failed to generate certificates...&quot;
      exit 1
    fi

  fi

  # Create crypto material using Fabric CAs
  if [ &quot;$CRYPTO&quot; == &quot;Certificate Authorities&quot; ]; then

    fabric-ca-client version &gt; /dev/null 2&gt;&amp;1
    if [ $? -ne 0 ]; then
      echo &quot;Fabric CA client not found locally, downloading...&quot;
      cd ..
      curl -s -L &quot;https://github.com/hyperledger/fabric-ca/releases/download/v1.4.4/hyperledger-fabric-ca-${OS_ARCH}-1.4.4.tar.gz&quot; | tar xz || rc=$?
    if [ -n &quot;$rc&quot; ]; then
        echo &quot;==&gt; There was an error downloading the binary file.&quot;
        echo &quot;fabric-ca-client binary is not available to download&quot;
    else
        echo &quot;==&gt; Done.&quot;
      cd test-network
    fi
    fi

    echo
    echo &quot;##########################################################&quot;
    echo &quot;##### Generate certificates using Fabric CA's ############&quot;
    echo &quot;##########################################################&quot;

    IMAGE_TAG=$IMAGETAG docker-compose -f $COMPOSE_FILE_CA up -d 2&gt;&amp;1

    . organizations/fabric-ca/registerEnroll.sh

    sleep 10

    echo &quot;##########################################################&quot;
    echo &quot;############ Create Org1 Identities ######################&quot;
    echo &quot;##########################################################&quot;

    createOrg1

    echo &quot;##########################################################&quot;
    echo &quot;############ Create Org2 Identities ######################&quot;
    echo &quot;##########################################################&quot;

    createOrg2

    echo &quot;##########################################################&quot;
    echo &quot;############ Create Orderer Org Identities ###############&quot;
    echo &quot;##########################################################&quot;

    createOrderer

  fi

  echo
  echo &quot;Generate CCP files for Org1 and Org2&quot;
  ./organizations/ccp-generate.sh
}

# 使用cryptogen（cryptogen用于配置网络中的证书、组织等）配置完网络组织后
# 这里使用configtxgen配置创世区块、channel以及锚节点
# 有一个&quot;configtx.yaml&quot;文件帮助配置网络中的组织创世区块，组织成员等内容
# 创建每个channel的MSP
# Once you create the organization crypto material, you need to create the
# genesis block of the orderer system channel. This block is required to bring
# up any orderer nodes and create any application channels.

# The configtxgen tool is used to create the genesis block. Configtxgen consumes a
# &quot;configtx.yaml&quot; file that contains the definitions for the sample network. The
# genesis block is defiend using the &quot;TwoOrgsOrdererGenesis&quot; profile at the bottom
# of the file. This profile defines a sample consortium, &quot;SampleConsortium&quot;,
# consisting of our two Peer Orgs. This consortium defines which organizations are
# recognized as members of the network. The peer and ordering organizations are defined
# in the &quot;Profiles&quot; section at the top of the file. As part of each organization
# profile, the file points to a the location of the MSP directory for each member.
# This MSP is used to create the channel MSP that defines the root of trust for
# each organization. In essense, the channel MSP allows the nodes and users to be
# recognized as network members. The file also specifies the anchor peers for each
# peer org. In future steps, this same file is used to create the channel creation
# transaction and the anchor peer updates.
#
#
# If you receive the following warning, it can be safely ignored:
#
# [bccsp] GetDefault -&gt; WARN 001 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP.
#
# You can ignore the logs regarding intermediate certs, we are not using them in
# this crypto implementation.

# Generate orderer system channel genesis block.
function createConsortium() {

  which configtxgen
  if [ &quot;$?&quot; -ne 0 ]; then
    echo &quot;configtxgen tool not found. exiting&quot;
    exit 1
  fi

  echo &quot;#########  Generating Orderer Genesis block ##############&quot;

  # Note: For some unknown reason (at least for now) the block file can't be
  # named orderer.genesis.block or the orderer will fail to launch!
  set -x
  configtxgen -profile TwoOrgsOrdererGenesis -channelID system-channel -outputBlock ./system-genesis-block/genesis.block
  res=$?
  set +x
  if [ $res -ne 0 ]; then
    echo &quot;Failed to generate orderer genesis block...&quot;
    exit 1
  fi
}

# 之后，启动peer节点和排序服务，创建相应的docker实体
# After we create the org crypto material and the system channel genesis block,
# we can now bring up the peers and orderering service. By default, the base
# file for creating the network is &quot;docker-compose-test-net.yaml&quot; in the ``docker``
# folder. This file defines the environment variables and file mounts that
# point the crypto material and genesis block that were created in earlier.

# Bring up the peer and orderer nodes using docker compose.
function networkUp() {

  checkPrereqs
  # generate artifacts if they don't exist
  if [ ! -d &quot;organizations/peerOrganizations&quot; ]; then
    createOrgs
    createConsortium
  fi

  COMPOSE_FILES=&quot;-f ${COMPOSE_FILE_BASE}&quot;

  if [ &quot;${DATABASE}&quot; == &quot;couchdb&quot; ]; then
    COMPOSE_FILES=&quot;${COMPOSE_FILES} -f ${COMPOSE_FILE_COUCH}&quot;
  fi

  IMAGE_TAG=$IMAGETAG docker-compose ${COMPOSE_FILES} up -d 2&gt;&amp;1

  docker ps -a
  if [ $? -ne 0 ]; then
    echo &quot;ERROR !!!! Unable to start network&quot;
    exit 1
  fi
}

# 将peer加入通道
## call the script to join create the channel and join the peers of org1 and org2
function createChannel() {

## Bring up the network if it is not arleady up.

  if [ ! -d &quot;organizations/peerOrganizations&quot; ]; then
    echo &quot;Bringing up network&quot;
    networkUp
  fi

  # now run the script that creates a channel. This script uses configtxgen once
  # more to create the channel creation transaction and the anchor peer updates.
  # configtx.yaml is mounted in the cli container, which allows us to use it to
  # create the channel artifacts
 scripts/createChannel.sh $CHANNEL_NAME $CLI_DELAY $MAX_RETRY $VERBOSE
  if [ $? -ne 0 ]; then
    echo &quot;Error !!! Create channel failed&quot;
    exit 1
  fi

}
# 实例化链码
## Call the script to isntall and instantiate a chaincode on the channel
function deployCC() {

  scripts/deployCC.sh $CHANNEL_NAME $CC_SRC_LANGUAGE $VERSION $CLI_DELAY $MAX_RETRY $VERBOSE

  if [ $? -ne 0 ]; then
    echo &quot;ERROR !!! Deploying chaincode failed&quot;
    exit 1
  fi

  exit 0
}

# 关闭网络
# Tear down running network
function networkDown() {
  # stop org3 containers also in addition to org1 and org2, in case we were running sample to add org3
  docker-compose -f $COMPOSE_FILE_BASE -f $COMPOSE_FILE_COUCH -f $COMPOSE_FILE_CA down --volumes --remove-orphans
  docker-compose -f $COMPOSE_FILE_COUCH_ORG3 -f $COMPOSE_FILE_ORG3 down --volumes --remove-orphans
  # Don't remove the generated artifacts -- note, the ledgers are always removed
  if [ &quot;$MODE&quot; != &quot;restart&quot; ]; then
    # Bring down the network, deleting the volumes
    #Cleanup the chaincode containers
    clearContainers
    #Cleanup images
    removeUnwantedImages
    # remove orderer block and other channel configuration transactions and certs
    rm -rf system-genesis-block/*.block organizations/peerOrganizations organizations/ordererOrganizations
    ## remove fabric ca artifacts
    rm -rf organizations/fabric-ca/org1/msp organizations/fabric-ca/org1/tls-cert.pem organizations/fabric-ca/org1/ca-cert.pem organizations/fabric-ca/org1/IssuerPublicKey organizations/fabric-ca/org1/IssuerRevocationPublicKey organizations/fabric-ca/org1/fabric-ca-server.db
    rm -rf organizations/fabric-ca/org2/msp organizations/fabric-ca/org2/tls-cert.pem organizations/fabric-ca/org2/ca-cert.pem organizations/fabric-ca/org2/IssuerPublicKey organizations/fabric-ca/org2/IssuerRevocationPublicKey organizations/fabric-ca/org2/fabric-ca-server.db
    rm -rf organizations/fabric-ca/ordererOrg/msp organizations/fabric-ca/ordererOrg/tls-cert.pem organizations/fabric-ca/ordererOrg/ca-cert.pem organizations/fabric-ca/ordererOrg/IssuerPublicKey organizations/fabric-ca/ordererOrg/IssuerRevocationPublicKey organizations/fabric-ca/ordererOrg/fabric-ca-server.db
    rm -rf addOrg3/fabric-ca/org3/msp addOrg3/fabric-ca/org3/tls-cert.pem addOrg3/fabric-ca/org3/ca-cert.pem addOrg3/fabric-ca/org3/IssuerPublicKey addOrg3/fabric-ca/org3/IssuerRevocationPublicKey addOrg3/fabric-ca/org3/fabric-ca-server.db


    # remove channel and script artifacts
    rm -rf channel-artifacts log.txt fabcar.tar.gz fabcar

  fi
}

# Obtain the OS and Architecture string that will be used to select the correct
# native binaries for your platform, e.g., darwin-amd64 or linux-amd64
OS_ARCH=$(echo &quot;$(uname -s | tr '[:upper:]' '[:lower:]' | sed 's/mingw64_nt.*/windows/')-$(uname -m | sed 's/x86_64/amd64/g')&quot; | awk '{print tolower($0)}')
# Using crpto vs CA. default is cryptogen
CRYPTO=&quot;cryptogen&quot;
# timeout duration - the duration the CLI should wait for a response from
# another container before giving up
MAX_RETRY=5
# default for delay between commands
CLI_DELAY=3
# channel name defaults to &quot;mychannel&quot;
CHANNEL_NAME=&quot;mychannel&quot;
# use this as the default docker-compose yaml definition
COMPOSE_FILE_BASE=docker/docker-compose-test-net.yaml
# docker-compose.yaml file if you are using couchdb
COMPOSE_FILE_COUCH=docker/docker-compose-couch.yaml
# certificate authorities compose file
COMPOSE_FILE_CA=docker/docker-compose-ca.yaml
# use this as the docker compose couch file for org3
COMPOSE_FILE_COUCH_ORG3=addOrg3/docker/docker-compose-couch-org3.yaml
# use this as the default docker-compose yaml definition for org3
COMPOSE_FILE_ORG3=addOrg3/docker/docker-compose-org3.yaml
#
# use golang as the default language for chaincode
CC_SRC_LANGUAGE=golang
# Chaincode version
VERSION=1
# default image tag
IMAGETAG=&quot;latest&quot;
# default database
DATABASE=&quot;leveldb&quot;

# Parse commandline args

## Parse mode
if [[ $# -lt 1 ]] ; then
  printHelp
  exit 0
else
  MODE=$1
  shift
fi

# parse a createChannel subcommand if used
if [[ $# -ge 1 ]] ; then
  key=&quot;$1&quot;
  if [[ &quot;$key&quot; == &quot;createChannel&quot; ]]; then
      export MODE=&quot;createChannel&quot;
      shift
  fi
fi

# parse flags

while [[ $# -ge 1 ]] ; do
  key=&quot;$1&quot;
  case $key in
  -h )
    printHelp
    exit 0
    ;;
  -c )
    CHANNEL_NAME=&quot;$2&quot;
    shift
    ;;
  -ca )
    CRYPTO=&quot;Certificate Authorities&quot;
    ;;
  -r )
    MAX_RETRY=&quot;$2&quot;
    shift
    ;;
  -d )
    CLI_DELAY=&quot;$2&quot;
    shift
    ;;
  -s )
    DATABASE=&quot;$2&quot;
    shift
    ;;
  -l )
    CC_SRC_LANGUAGE=&quot;$2&quot;
    shift
    ;;
  -v )
    VERSION=&quot;$2&quot;
    shift
    ;;
  -i )
    IMAGETAG=&quot;$2&quot;
    shift
    ;;
  -verbose )
    VERBOSE=true
    shift
    ;;
  * )
    echo
    echo &quot;Unknown flag: $key&quot;
    echo
    printHelp
    exit 1
    ;;
  esac
  shift
done

# Are we generating crypto material with this command?
if [ ! -d &quot;organizations/peerOrganizations&quot; ]; then
  CRYPTO_MODE=&quot;with crypto from '${CRYPTO}'&quot;
else
  CRYPTO_MODE=&quot;&quot;
fi

# Determine mode of operation and printing out what we asked for
if [ &quot;$MODE&quot; == &quot;up&quot; ]; then
  echo &quot;Starting nodes with CLI timeout of '${MAX_RETRY}' tries and CLI delay of '${CLI_DELAY}' seconds and using database '${DATABASE}' ${CRYPTO_MODE}&quot;
  echo
elif [ &quot;$MODE&quot; == &quot;createChannel&quot; ]; then
  echo &quot;Creating channel '${CHANNEL_NAME}'.&quot;
  echo
  echo &quot;If network is not up, starting nodes with CLI timeout of '${MAX_RETRY}' tries and CLI delay of '${CLI_DELAY}' seconds and using database '${DATABASE} ${CRYPTO_MODE}&quot;
  echo
elif [ &quot;$MODE&quot; == &quot;down&quot; ]; then
  echo &quot;Stopping network&quot;
  echo
elif [ &quot;$MODE&quot; == &quot;restart&quot; ]; then
  echo &quot;Restarting network&quot;
  echo
elif [ &quot;$MODE&quot; == &quot;deployCC&quot; ]; then
  echo &quot;deploying chaincode on channel '${CHANNEL_NAME}'&quot;
  echo
else
  printHelp
  exit 1
fi

if [ &quot;${MODE}&quot; == &quot;up&quot; ]; then
  networkUp
elif [ &quot;${MODE}&quot; == &quot;createChannel&quot; ]; then
  createChannel
elif [ &quot;${MODE}&quot; == &quot;deployCC&quot; ]; then
  deployCC
elif [ &quot;${MODE}&quot; == &quot;down&quot; ]; then
  networkDown
elif [ &quot;${MODE}&quot; == &quot;restart&quot; ]; then
  networkDown
  networkUp
else
  printHelp
  exit 1
fi

</code></pre>
<h2 id="启动test-network">启动test-network</h2>
<pre><code class="language-shell">root@lizonglin-virtual-machine:/home/lizonglin/GoWork/src/github.com/fabric/scripts/fabric-samples/test-network# ./network.sh up
# 可以看到，默认使用leveldb
Starting nodes with CLI timeout of '5' tries and CLI delay of '3' seconds and using database 'leveldb' with crypto from 'cryptogen'

LOCAL_VERSION=2.2.1
DOCKER_IMAGE_VERSION=2.2.1
/home/lizonglin/GoWork/src/github.com/fabric/scripts/fabric-samples/test-network/../bin/cryptogen

# 首先使用cryptogen创建证书
##########################################################
##### Generate certificates using cryptogen tool #########
##########################################################

# 组织1
##########################################################
############ Create Org1 Identities ######################
##########################################################
+ cryptogen generate --config=./organizations/cryptogen/crypto-config-org1.yaml --output=organizations
org1.example.com
+ res=0
+ set +x
# 组织2
##########################################################
############ Create Org2 Identities ######################
##########################################################
+ cryptogen generate --config=./organizations/cryptogen/crypto-config-org2.yaml --output=organizations
org2.example.com
+ res=0
+ set +x
# 排序服务
##########################################################
############ Create Orderer Org Identities ###############
##########################################################
+ cryptogen generate --config=./organizations/cryptogen/crypto-config-orderer.yaml --output=organizations
+ res=0
+ set +x

Generate CCP files for Org1 and Org2
/home/lizonglin/GoWork/src/github.com/fabric/scripts/fabric-samples/test-network/../bin/configtxgen
# 排序节点的创世区块
#########  Generating Orderer Genesis block ##############
+ configtxgen -profile TwoOrgsOrdererGenesis -channelID system-channel -outputBlock ./system-genesis-block/genesis.block
2021-01-21 18:53:34.963 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration
2021-01-21 18:53:35.017 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 002 orderer type: etcdraft
2021-01-21 18:53:35.017 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 Orderer.EtcdRaft.Options unset, setting to tick_interval:&quot;500ms&quot; election_tick:10 heartbeat_tick:1 max_inflight_blocks:5 snapshot_interval_size:16777216 
2021-01-21 18:53:35.017 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 004 Loaded configuration: /home/lizonglin/GoWork/src/github.com/fabric/scripts/fabric-samples/test-network/configtx/configtx.yaml
2021-01-21 18:53:35.019 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 005 Generating genesis block
2021-01-21 18:53:35.020 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 006 Writing genesis block
+ res=0
+ set +x
Creating network &quot;net_test&quot; with the default driver
Creating volume &quot;net_orderer.example.com&quot; with default driver
Creating volume &quot;net_peer0.org1.example.com&quot; with default driver
Creating volume &quot;net_peer0.org2.example.com&quot; with default driver
Creating peer0.org2.example.com ... done
Creating orderer.example.com    ... done
Creating peer0.org1.example.com ... done
# 现在的docker中包含的容器，test-network到这里就是初步启动成功了
CONTAINER ID   IMAGE                               COMMAND             CREATED          STATUS                  PORTS                              NAMES
ae8899485a40   hyperledger/fabric-peer:latest      &quot;peer node start&quot;   18 seconds ago   Up Less than a second   0.0.0.0:7051-&gt;7051/tcp             peer0.org1.example.com
e8e4acee2cdd   hyperledger/fabric-orderer:latest   &quot;orderer&quot;           18 seconds ago   Up Less than a second   0.0.0.0:7050-&gt;7050/tcp             orderer.example.com
c0c720b03c4a   hyperledger/fabric-peer:latest      &quot;peer node start&quot;   18 seconds ago   Up 1 second             7051/tcp, 0.0.0.0:9051-&gt;9051/tcp   peer0.org2.example.com

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VMware使用宿主机的小飞机]]></title>
        <id>https://lizonglin313.github.io/post/vmware-shi-yong-su-zhu-ji-de-xiao-fei-ji</id>
        <link href="https://lizonglin313.github.io/post/vmware-shi-yong-su-zhu-ji-de-xiao-fei-ji">
        </link>
        <updated>2021-01-17T11:13:49.000Z</updated>
        <content type="html"><![CDATA[<p>首先，在小飞机客户端设置允许本地代理允许来自局域网的连接</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/01/17/lyS2NionqGdw6Hc.png" alt="image.png" loading="lazy"></figure>
<p>然后，设置VMware的网络适配器的网络连接为桥接模式，复制连接物理网络状态，设置Ubuntu的网络，所有代理和主机都设置为宿主机的IP（如果宿主机为无线连接到网络就是WLAN的IPv4），注意端口号</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/01/17/fvbXAFNuGBZSx3i.png" alt="image.png" loading="lazy"></figure>
<p>最后，设置Ubuntu的IP地址、网关、DNS信息，与宿主机在同一局域网</p>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/01/17/y51ZmLcb3i7hsS2.png" alt="image.png" loading="lazy"></figure>
<p>Apply</p>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2021/01/17/6t4dfXCBHNG29RK.png" alt="image.png" loading="lazy"></figure>
<blockquote>
<p>转载自：<a href="https://bbs.huaweicloud.com/blogs/107105">VMware下ubuntu通过主机Shadowsocks上外网VMware下ubuntu通过主机Shadowsocks上外网-云社区-华为云 (huaweicloud.com)</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git使用]]></title>
        <id>https://lizonglin313.github.io/post/git-shi-yong</id>
        <link href="https://lizonglin313.github.io/post/git-shi-yong">
        </link>
        <updated>2021-01-15T15:14:56.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>有关git使用中的学习记录</p>
</blockquote>
<h2 id="clone速度太慢">clone速度太慢</h2>
<h3 id="方法一">方法一</h3>
<ul>
<li>调整http提交缓存(亲测有效，使用https方式clone)</li>
</ul>
<pre><code class="language-bash">$ git config --global http.postBuffer 524288000
</code></pre>
<p>调整前：</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/01/15/giAKeOhscXGqUrN.png" alt="LA0@_`KKOXC5IKFKPJ_~PRX.png" loading="lazy"></figure>
<p>调整后：</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/01/15/hlJu5ioR4yxzrvg.png" alt="5DU1LP__L__P_K482P_C83O.png" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[bitcoin白皮书]]></title>
        <id>https://lizonglin313.github.io/post/bitcoin-bai-pi-shu</id>
        <link href="https://lizonglin313.github.io/post/bitcoin-bai-pi-shu">
        </link>
        <updated>2021-01-11T14:24:37.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/01/11/1rlwnCBMFfhPkWc.png" alt="PDF_bitcoin.png" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/01/11/bHuZ8NMJ9ky6LUc.png" alt="PDF_bitcoin _1_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/01/11/HmAtd5nSkf41xLW.png" alt="PDF_bitcoin _2_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2021/01/11/ev3NgUGXMCVcFu4.png" alt="PDF_bitcoin _3_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://i.loli.net/2021/01/11/SJKFUqMmpHgZ39V.png" alt="PDF_bitcoin _4_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://i.loli.net/2021/01/11/nmIukExlrbX9A27.png" alt="PDF_bitcoin _5_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://i.loli.net/2021/01/11/rjxJMP2Lqfsi5V3.png" alt="PDF_bitcoin _6_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://i.loli.net/2021/01/11/3za9oj81VDqJpKG.png" alt="PDF_bitcoin _7_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://i.loli.net/2021/01/11/ODUPIMNfsyEkahq.png" alt="PDF_bitcoin _8_.png" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在二叉树中使用递归解决问题]]></title>
        <id>https://lizonglin313.github.io/post/zai-er-cha-shu-zhong-shi-yong-di-gui-jie-jue-wen-ti</id>
        <link href="https://lizonglin313.github.io/post/zai-er-cha-shu-zhong-shi-yong-di-gui-jie-jue-wen-ti">
        </link>
        <updated>2020-06-08T10:05:43.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>整理自leetcode</p>
<p>树结点定义如下：</p>
<pre><code class="language-c">Definition for a binary tree node.
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};
</code></pre>
</blockquote>
<h2 id="二叉树的最大深度">二叉树的最大深度</h2>
<p>给定一个二叉树，找出其最大深度。</p>
<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>
<p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p>
<p><strong>示例：</strong><br>
给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>
<pre><code>    3
   / \
  9  20
    /  \
   15   7
</code></pre>
<p>返回它的最大深度 3 。</p>
<p><strong>代码</strong>:</p>
<pre><code class="language-c">int maxDepth(struct TreeNode *root) {
	
	int ld = 0;
	int rd = 0;
	if (NULL == root) return 0;
	if (root-&gt;left) ld = maxDepth(root-&gt;left);	// 左子树存在进行左递归
	if (root-&gt;right) rd = maxDepth(root-&gt;right);	// 右子树存在进行右递归
	return 1 + ((ld &gt; rd) ? ld : rd);		// 本层递归结束比较左右子树的深度取大者相加
}
</code></pre>
<h2 id="对称二叉树">对称二叉树</h2>
<p>给定一个二叉树，检查它是否是镜像对称的。</p>
<p>例如，二叉树 <code>[1,2,2,3,4,4,3]</code> 是对称的。</p>
<pre><code>    1
   / \
  2   2
 / \ / \
3  4 4  3
</code></pre>
<p>但是下面这个 <code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p>
<pre><code>    1
   / \
  2   2
   \   \
   3    3
</code></pre>
<p><strong>代码</strong>:</p>
<pre><code class="language-c">bool recursion(struct TreeNode* left, struct TreeNode* right) {
	
	// 如果左子树和右子树均为空 返回真
	if (NULL == left &amp;&amp; NULL == right) return true;
	else if (left == NULL || right == NULL) {
		// 其中一个不为空 返回假
		return false;
	}

	// 左结点的值是否等于右结点的值
	bool c1 = (left-&gt;val == right-&gt;val);
	// 左结点的左子树是否等于右结点的右子树
	bool c2 = recursion(left-&gt;left, right-&gt;right);
	// 左结点的右子树是否等于右结点的左子树
	bool c3 = recursion(left-&gt;right, right-&gt;left);
	// 如果同时成立
	if (c1&amp;&amp;c2&amp;&amp;c3) {
		return true;
	}
	else {
		return false;
	}
}

bool isSymmetric(struct TreeNode* root) {
	// 根 为空 返回正确
	if (root == NULL) {
		return true;
	}
	return recursion(root-&gt;left, root-&gt;right);
}
</code></pre>
<h2 id="路径总和">路径总和</h2>
<p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p>
<p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p>
<p><strong>示例:</strong><br>
给定如下二叉树，以及目标和 <code>sum = 22</code>，</p>
<pre><code>              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
</code></pre>
<p>返回 <code>true</code>, 因为存在目标和为 22 的根节点到叶子节点的路径 <code>5-&gt;4-&gt;11-&gt;2</code>。</p>
<p><strong>代码</strong>:</p>
<pre><code class="language-c">bool hasPathSum(struct TreeNode* root, int sum) {

	if (NULL == root) return false;

	// 保证该结点为叶子结点的前提下 ，判断此时的sum是否和结点的值相等
	if (root-&gt;val == sum &amp;&amp; NULL == root-&gt;left &amp;&amp; NULL == root-&gt;right)
		return true;

	// 递归向下层遍历，出错直接执行 false
	if (hasPathSum(root-&gt;left, sum - root-&gt;val) || hasPathSum(root-&gt;right, sum - root-&gt;val))
		return true;

	return false;

}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链式存储二叉树的遍历]]></title>
        <id>https://lizonglin313.github.io/post/lian-shi-cun-chu-er-cha-shu-de-bian-li</id>
        <link href="https://lizonglin313.github.io/post/lian-shi-cun-chu-er-cha-shu-de-bian-li">
        </link>
        <updated>2020-05-29T08:27:12.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>先序遍历，中序遍历，后序遍历以及层次遍历。</p>
<p>使用递归、队列。</p>
<p>整理自Leetcode。</p>
</blockquote>
<h2 id="说明">说明</h2>
<p>使用到的树结点类型为：</p>
<pre><code class="language-c">struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};
</code></pre>
<h2 id="先序遍历">先序遍历</h2>
<p>给定一个二叉树，返回它的 <em>前序</em> 遍历。</p>
<p><strong>示例:</strong></p>
<pre><code>输入: [1,null,2,3]  
   1
    \
     2
    /
   3 

输出: [1,2,3]
</code></pre>
<p><strong>代码</strong>:</p>
<pre><code class="language-c">/*求二叉树数据个数，用于动态申请空间*/
int size(struct TreeNode* root)
{
	if (!root) return 0;
	return size(root-&gt;left) + size(root-&gt;right) + 1;	// 递归求二叉树的个数
}
/*递归进行先序遍历*/
void PreOrder(struct TreeNode *root, int *ret, int *retIndex) {
	if (root == NULL) {
		return;
	}
	ret[(*retIndex)++] = root-&gt;val;			// 根
	PreOrder(root-&gt;left, ret, retIndex);	// 左
	PreOrder(root-&gt;right, ret, retIndex);	// 右
}

int* preorderTraversal(struct TreeNode* root, int* returnSize) {

    int treesize = size(root);		// 树结点数量
	int retIndex = 0;				// 数组索引
	int *ret = (int*)malloc(sizeof(int) * treesize);	// 申请空间
	memset(ret, 0, treesize);		// 置零

	PreOrder(root, ret, &amp;retIndex);		// 先序遍历
	*returnSize = retIndex;

	return ret;

}
</code></pre>
<h2 id="中序遍历">中序遍历</h2>
<p>给定一个二叉树，返回它的<em>中序</em> 遍历。</p>
<p><strong>示例:</strong></p>
<pre><code>输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]
</code></pre>
<p><strong>代码</strong>:</p>
<pre><code class="language-c">int size(struct TreeNode* root)/*求二叉树数据个数*/
{
   if(!root) return 0;
   return size(root-&gt;left)+size(root-&gt;right)+1;
}

void inorder(struct TreeNode* root, int *ret, int* retIndex)/*中序遍历二叉树*/
{
	if (root == NULL) return;

	inorder(root-&gt;left, ret, retIndex);
	ret[(*retIndex)++] = root-&gt;val;
	inorder(root-&gt;right, ret, retIndex);
}

int* inorderTraversal(struct TreeNode* root, int* returnSize) {
    
	int treesize = size(root);
    int retIndex = 0;
	int *ret = (int*)malloc(treesize * sizeof(int));
	memset(ret, 0, treesize);
	
	inorder(root, ret, &amp;retIndex);
    *returnSize = retIndex;
     
    return ret;
}

</code></pre>
<h2 id="后序遍历">后序遍历</h2>
<p>给定一个二叉树，返回它的 <em>后序</em> 遍历。</p>
<p><strong>示例:</strong></p>
<pre><code>输入: [1,null,2,3]  
   1
    \
     2
    /
   3 

输出: [3,2,1]
</code></pre>
<p><strong>代码</strong>:</p>
<pre><code class="language-c">int size(struct TreeNode* root)/*求二叉树数据个数*/
{
   if(!root) return 0;
   return size(root-&gt;left)+size(root-&gt;right)+1;
}

void postorder(struct TreeNode* root, int *ret, int* retIndex)/*中序遍历二叉树*/
{
	if (root == NULL) return;

	postorder(root-&gt;left, ret, retIndex);
	postorder(root-&gt;right, ret, retIndex);
    ret[(*retIndex)++] = root-&gt;val;

}

int* postorderTraversal(struct TreeNode* root, int* returnSize){
    int treesize = size(root);
    int retIndex = 0;
	int *ret = (int*)malloc(treesize * sizeof(int));
	memset(ret, 0, treesize);
	
	postorder(root, ret, &amp;retIndex);
    *returnSize = retIndex;
    return ret;
}
</code></pre>
<h2 id="先序-中序-后序">先序、中序、后序</h2>
<p>显然，对于三种遍历方式，在递归实现中，唯一的不同是递归函数中<code>ret[(*retIndex)++] = root-&gt;val</code>语句的位置:</p>
<pre><code class="language-c">void order(struct TreeNode* root, int *ret, int* retIndex)
{
	if (root == NULL) return;

    //ret[(*retIndex)++] = root-&gt;val;
	postorder(root-&gt;left, ret, retIndex);
	//ret[(*retIndex)++] = root-&gt;val;
    postorder(root-&gt;right, ret, retIndex);
    //ret[(*retIndex)++] = root-&gt;val;

}
</code></pre>
<p>所以，对于三种遍历方式，我们可以统一写为：</p>
<pre><code class="language-c">/*递归求树结点的个数*/
int size(struct TreeNode *root){
    if(!root) return 0;
    return size(root-&gt;left) + size(root-&gt;right) + 1;
}
/**/
void order(struct TreeNode *root, int *ret, int *retIndex, METHOD){
    if(root==NULL) return 0;
    if(METHOD is preorder){
        
        ret[(*resIndex++)] = root-&gt;val;
        order(root-&gt;left, ret, retIndex, METHOD);
        order(root-&gt;right, ret, retIndex, METHOD);
    
    }else if(METHOD is inorder){
    
        order(root-&gt;left, ret, retIndex, METHOD);
        ret[(*resIndex++)] = root-&gt;val;
        order(root-&gt;right, ret, retIndex, METHOD);
    
    }else if(METHOD is lastorder){
    
        order(root-&gt;left, ret, retIndex, METHOD);
        order(root-&gt;right, ret, retIndex, METHOD);
        ret[(*resIndex++)] = root-&gt;val;
    
    }
}

int *orderTraversal(struct TreeNode *root, int *treeSize, METHOD){
    int treesize = size(root);
    int retIndex = 0;
    int *ret = (int*)malloc(sizeof(int)*treesize);
    memset(ret, 0, treesize);
    order(root, ret, &amp;retIndex, METHOD);
    *returnSize = retIndex;
    return ret;
}
</code></pre>
<h2 id="层次遍历">层次遍历</h2>
<p>给你一个二叉树，请你返回其按 <strong>层序遍历</strong> 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p>
<p><strong>示例：</strong><br>
二叉树：<code>[3,9,20,null,null,15,7]</code>,</p>
<pre><code>    3
   / \
  9  20
    /  \
   15   7
</code></pre>
<p>返回其层次遍历结果：</p>
<pre><code>[
  [3],
  [9,20],
  [15,7]
]
</code></pre>
<p><strong>代码</strong>:</p>
<blockquote>
<p>作者：r0vHWU5AdJ<br>
链接：https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/chun-cchuang-jian-dui-lie-shi-xian-er-cha-shu-de-c/<br>
来源：力扣（LeetCode）<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<pre><code class="language-c">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

//创建队列
//1,构建队列，实现压入和弹出函数 Push_Queue 和 Pop_Queue
//2,利用队列先进先出的特性实现二叉树的层序遍历
//3,将二叉树根 root 压入队列，并将 NULL 作为每层的区分节点也压入队列
//4,从队列中读出节点，保存当前节点的值，并且将左右支分别压入队列
//5,遇到层的区分节点则处理下一层，直到队列为空

#define     MAX_LEVEL       1000

//声明队列节点结构
struct QueueNode {
    struct TreeNode* pTreeNode;     //队列元素：二叉树节点指针
    struct TreeNodeQueue* pNext;    //队列元素：下一个节点指针
};

//声明队列结构
struct TreeNodeQueue {
    int     iNum;                   //队列元素个数
    struct QueueNode*   pHead;      //队列头指针
    struct QueueNode*   pTail;      //队列尾指针
};

//函数一：向队列中增加元素
bool Push_Queue(struct TreeNodeQueue* pQueue, struct TreeNode* pTreeNode){
    struct QueueNode*   pQueueNode = NULL;

    if(NULL == pQueue) return false;

    pQueueNode = (struct QueueNode*)malloc(sizeof(struct QueueNode));
    pQueueNode-&gt;pTreeNode = pTreeNode;
    pQueueNode-&gt;pNext = NULL;

    if(0 == pQueue-&gt;iNum)
    {
        pQueue-&gt;pHead = pQueueNode;
        pQueue-&gt;pTail = pQueueNode;
        pQueue-&gt;iNum += 1;
    }
    else
    {
        pQueue-&gt;pTail-&gt;pNext = pQueueNode;
        pQueue-&gt;pTail = pQueueNode;
        pQueue-&gt;iNum += 1;
    }

    return true;
}

//函数二：从队列中取出元素
struct TreeNode* Pop_Queue(struct TreeNodeQueue* pQueue){
    struct TreeNode*    pRet    = NULL;
    struct QueueNode*   pTmp    = NULL;

    if((NULL == pQueue) || (0 == pQueue-&gt;iNum)) return NULL;

    pRet = pQueue-&gt;pHead-&gt;pTreeNode;

    pQueue-&gt;iNum -= 1;
    if(0 == pQueue-&gt;iNum)
    {
        free(pQueue-&gt;pHead);
        pQueue-&gt;pHead = NULL;
        pQueue-&gt;pTail = NULL;
    }
    else
    {
        pTmp = pQueue-&gt;pHead-&gt;pNext;
        free(pQueue-&gt;pHead);
        pQueue-&gt;pHead = pTmp;
    }
    
    return pRet;
}

int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){
    int         iNum        = 0;
    int         iRetSize    = 0;
    int**       pRet        = NULL;
    int*        pRetCol     = NULL;
    
    struct TreeNodeQueue  	strQueue;
    struct TreeNode* 		pTmpNode = NULL;

    //1.申请空间,并初始化
    pRet = (int**)malloc(sizeof(int*) * MAX_LEVEL);
    memset(pRet, 0x00, sizeof(int*) * MAX_LEVEL);
    pRetCol = (int*)malloc(sizeof(int) * MAX_LEVEL);
    memset(pRetCol, 0x00, sizeof(int) * MAX_LEVEL);
    memset(&amp;strQueue, 0x00, sizeof(struct TreeNodeQueue));

    //2.特殊处理
    if(NULL == root)
    {
        *returnSize = iRetSize;
        *returnColumnSizes = pRetCol;
        return pRet;
    }

    //3.将二叉树根节点加入队列,并且加入空节点作为每层的区分节点
    Push_Queue(&amp;strQueue, root);
    pRet[iRetSize] = (int*)malloc(sizeof(int) * strQueue.iNum);
    Push_Queue(&amp;strQueue, NULL);

    //4.处理队列中的二叉树节点，直到队列为空
    while(strQueue.iNum != 0)
    {
        pTmpNode = Pop_Queue(&amp;strQueue);
        if(NULL == pTmpNode)
        {
            if(0 != strQueue.iNum)
            {
                //6.当前层处理完，进入下一层
                iRetSize += 1;
                pRet[iRetSize] = (int*)malloc(sizeof(int) * strQueue.iNum);

                Push_Queue(&amp;strQueue, NULL);
            }
        }
        else
        {
            //5.处理当前层的节点，分别将左右支压入队列
            pRet[iRetSize][pRetCol[iRetSize]] = pTmpNode-&gt;val;
            pRetCol[iRetSize] += 1;

            if(NULL != pTmpNode-&gt;left)
            {
                Push_Queue(&amp;strQueue, pTmpNode-&gt;left);
            }
            if(NULL != pTmpNode-&gt;right)
            {
                Push_Queue(&amp;strQueue, pTmpNode-&gt;right);
            }
        }
    }

    //7.返回
    *returnSize = iRetSize + 1;
    *returnColumnSizes = pRetCol;
    return pRet;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[leetcode链表初等整理]]></title>
        <id>https://lizonglin313.github.io/post/leetcode-lian-biao-chu-deng-zheng-li</id>
        <link href="https://lizonglin313.github.io/post/leetcode-lian-biao-chu-deng-zheng-li">
        </link>
        <updated>2020-05-25T12:39:37.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>力扣关于链表这部分基础算法还是较为简单和基础的</p>
<p>没有特殊说明的情况下，链表节点类型为：</p>
<pre><code class="language-c">struct ListNode {
    int val;
    struct ListNode *next;
};
</code></pre>
<p>同时，需要注意，默认的头指针<code>head-&gt;val</code>域即第一个元素。</p>
</blockquote>
<h2 id="删除链表中的节点">删除链表中的节点</h2>
<p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p>
<p>现有一个链表 -- head = [4,5,1,9]，它可以表示为:</p>
<figure data-type="image" tabindex="1"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/237_example.png" alt="img" loading="lazy"></figure>
<p><strong>示例 1:</strong></p>
<pre><code>输入: head = [4,5,1,9], node = 5
输出: [4,1,9]
解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: head = [4,5,1,9], node = 1
输出: [4,5,9]
解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.
</code></pre>
<p><strong>说明:</strong></p>
<ul>
<li>链表至少包含两个节点。</li>
<li>链表中所有节点的值都是唯一的。</li>
<li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li>
<li>不要从你的函数中返回任何结果。</li>
</ul>
<p><strong>代码</strong>:</p>
<p>这个题目很容易理解偏差。其实就是让你把给你的节点删掉罢了。</p>
<pre><code class="language-c">void deleteNode(struct ListNode* node) {
	node-&gt;val = node-&gt;next-&gt;val;
	node-&gt;next = node-&gt;next-&gt;next;
}
</code></pre>
<h2 id="删除链表的倒数第n个节点">删除链表的倒数第N个节点</h2>
<p>给定一个链表，删除链表的倒数第 <em>n</em> 个节点，并且返回链表的头结点。</p>
<p><strong>示例：</strong></p>
<pre><code>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.

当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.
</code></pre>
<p><strong>说明：</strong></p>
<p>给定的 <em>n</em> 保证是有效的。</p>
<p><strong>进阶：</strong></p>
<p>你能尝试使用一趟扫描实现吗？</p>
<p><strong>代码</strong>:</p>
<p>采用快慢指针的思路。设置指针<code>p</code>和<code>q</code>：</p>
<ul>
<li>一开始，<code>p</code>和<code>q</code>都指向头节点；</li>
<li><code>q</code>指针现后移至<code>p</code>指针后的第<code>n</code>个位置，也就是<code>q</code>指针始终比<code>p</code>指针快<code>n</code>个，需要注意如果<code>q</code>还未移动<code>n</code>就已经是<code>NULL</code>了那么删去头节点就结束了；</li>
<li><code>p=p-&gt;next</code>同时<code>q=q-&gt;next</code>直到<code>q-&gt;next==NULL</code>，此时<code>p-&gt;next</code>就是要删除的节点。</li>
</ul>
<pre><code class="language-c">struct ListNode* removeNthFromEnd(struct ListNode* head, int n) {

    struct ListNode *p, *q;
	p = head; q = head;

	int i;
	for (i = 0; i &lt; n; i++) {
		if (q-&gt;next == NULL) {
			head = head-&gt;next;
			return head;
		}
		q = q-&gt;next;
	}

	while (q-&gt;next!=NULL) {
		q = q-&gt;next;
		p = p-&gt;next;
	}
    
	p-&gt;next = p-&gt;next-&gt;next;
    
	return head;
}
</code></pre>
<h2 id="反转链表">反转链表</h2>
<p>反转一个单链表。</p>
<p><strong>示例:</strong></p>
<pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL
输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL
</code></pre>
<p><strong>进阶:</strong><br>
你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p>
<p><strong>代码</strong>:</p>
<p>三指针原地逆转。</p>
<pre><code class="language-c">struct ListNode* reverseList(struct ListNode* head) {
	
	if (head == NULL) return NULL;

	struct ListNode *h,*p,*c;

	h = head;
	p = h-&gt;next;

	// 如果此时只有一个节点
	if (p == NULL) return head;

	c = p-&gt;next;

	// 如果只有两个节点
	if (c == NULL) {
		p-&gt;next = h;
		h-&gt;next = NULL;
		return p;
	}

	// 三节点及以上情况
	while (c != NULL) {
		p-&gt;next = h;
		h = p;
		p = c;
		c = c-&gt;next;
	}
	p-&gt;next = h;
	head-&gt;next = NULL;
	head = p;

	return head;

}
</code></pre>
<h2 id="合并两个有序链表">合并两个有序链表</h2>
<p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>
<p><strong>示例：</strong></p>
<pre><code>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4
输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4
</code></pre>
<p><strong>代码</strong>:</p>
<p>判断大小拆指针重连。</p>
<pre><code class="language-c">struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){

    if (l1 == NULL &amp;&amp; l2 == NULL) return NULL;
	if (l1 == NULL &amp;&amp; l2 != NULL) return l2;
	if (l1 != NULL &amp;&amp; l2 == NULL) return l1;
    
   struct ListNode *p1, *p2, *newhead, *q;
	p1 = l1;
	p2 = l2;
	newhead = (l1-&gt;val &lt;= l2-&gt;val) ? l1 : l2;
	q = newhead;

	if (newhead == p1) p1 = p1-&gt;next;
	else p2 = p2-&gt;next;

	while (p1&amp;&amp;p2) {
		if (p1-&gt;val &lt;= p2-&gt;val) {
			q-&gt;next = p1;
			p1 = p1-&gt;next;
			q = q-&gt;next;
		}
		else {
			q-&gt;next = p2;
			p2 = p2-&gt;next;
			q = q-&gt;next;
		}
	}

	if (p1) q-&gt;next = p1;
	if (p2) q-&gt;next = p2;

	return newhead;

}
</code></pre>
<h2 id="回文链表">回文链表</h2>
<p>请判断一个链表是否为回文链表。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: 1-&gt;2
输出: false
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: 1-&gt;2-&gt;2-&gt;1
输出: true
</code></pre>
<p><strong>进阶：</strong><br>
你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p>
<p><strong>代码</strong>:</p>
<p>将链表数值写入数组，然后判断数组是否是回文数组。</p>
<pre><code class="language-c">bool isPalindrome(struct ListNode* head) {

	if (head == NULL || head-&gt;next == NULL) return true;

	// 计算链表长度
	struct ListNode *p = head;
	int len = 0;
	while (p) {
		p = p-&gt;next;
		len++;
	}

	// 将链表复制到数组中
	int *temparr = (int*)malloc(sizeof(int)*len);
	int i = 0;
	for (p = head; i &lt; len; i++) {
		temparr[i] = p-&gt;val;
		p = p-&gt;next;
	}

	// 判断数组
	int q = 0;
	bool ispld = true;
	for (; q &lt; (len - q - 1); q++) {
		if (temparr[q] != temparr[len - q - 1]) {
			ispld = false;
			break;
		}
	}
	return ispld;

}
</code></pre>
<h2 id="环形链表">环形链表</h2>
<p>给定一个链表，判断链表中是否有环。</p>
<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p>
<p><strong>示例 1：</strong></p>
<pre><code>输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="img" loading="lazy"></figure>
<p><strong>示例 2：</strong></p>
<pre><code>输入：head = [1,2], pos = 0
输出：true
解释：链表中有一个环，其尾部连接到第一个节点。
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img" loading="lazy"></figure>
<p><strong>示例 3：</strong></p>
<pre><code>输入：head = [1], pos = -1
输出：false
解释：链表中没有环。
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img" loading="lazy"></figure>
<p><strong>进阶：</strong></p>
<p>你能用 <em>O(1)</em>（即，常量）内存解决此问题吗？</p>
<p><strong>代码</strong>:</p>
<p>使用快慢指针。始终有<code>p=p-&gt;next</code>同时<code>q=q-&gt;next-&gt;next</code>，这样可以保证如果链表中有环，指针<code>p</code>和<code>q</code>一定能相遇。</p>
<pre><code class="language-c">bool hasCycle(struct ListNode *head) {

	struct ListNode *p, *q;
	p = head;
	q = head;
	
	if (p == NULL) return false;
	
	while (p!=NULL&amp;&amp;q!=NULL) {
        if(q-&gt;next==NULL)return false;
        if(q-&gt;next-&gt;next==NULL)return false;
		p = p-&gt;next;
		q = q-&gt;next-&gt;next;
		if (p == q) {
			return true;
		}
	}
	return false;

}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[leetcode字符串初等整理]]></title>
        <id>https://lizonglin313.github.io/post/leetcode-zi-fu-chuan-chu-deng-zheng-li</id>
        <link href="https://lizonglin313.github.io/post/leetcode-zi-fu-chuan-chu-deng-zheng-li">
        </link>
        <updated>2020-05-20T13:35:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="反转字符串">反转字符串</h2>
<p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>char[]</code> 的形式给出。</p>
<p>不要给另外的数组分配额外的空间，你必须<strong>原地修改输入数组</strong>、使用 O(1) 的额外空间解决这一问题。</p>
<p>你可以假设数组中的所有字符都是 <a href="https://baike.baidu.com/item/ASCII">ASCII</a> 码表中的可打印字符。</p>
<p><strong>示例 1：</strong></p>
<pre><code>输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]
输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]
</code></pre>
<p><strong>示例 2：</strong></p>
<pre><code>输入：[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]
输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]
</code></pre>
<p><strong>代码</strong>:</p>
<p>思路和翻转整数数组的思路一致，两个指针分别从前后开始扫描，进行交换。</p>
<pre><code class="language-c">void reverseString(char* s, int sSize) {
	// 用反转数组相同的方式
	int i;
	for (i = 0; i &lt; sSize / 2; i++) {
		char temp = s[sSize - 1 - i];
		s[sSize - 1 - i] = s[i];
		s[i] = temp;
	}

}
</code></pre>
<h2 id="整数反转">整数反转</h2>
<p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: 123
输出: 321
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: -123
输出: -321
</code></pre>
<p><strong>示例 3:</strong></p>
<pre><code>输入: 120
输出: 21
</code></pre>
<p><strong>注意:</strong></p>
<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>
<p><strong>代码</strong>:</p>
<pre><code class="language-c">int reverse(int x){
    long count=0;
    while(x!=0){
        // 翻转整数
        count=count*10+x%10;
        x=x/10;
    }
    return count&gt;2147483647||count&lt;-2147483648?0:count;	// 直接给出范围判断是否溢出
}
</code></pre>
<h2 id="字符串中的第一个唯一字符">字符串中的第一个唯一字符</h2>
<p>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</p>
<p><strong>案例:</strong></p>
<pre><code>s = &quot;leetcode&quot;
返回 0.

s = &quot;loveleetcode&quot;,
返回 2.
</code></pre>
<p>**注意事项：**您可以假定该字符串只包含小写字母。</p>
<p><strong>代码</strong>：</p>
<p>本题我用暴力法做的，在时间上不是很理想。</p>
<p>二重循环，外层遍历的元素与内层遍历的除本身外的元素进行比较，<code>find</code>表示是否找到相同的数，<code>find=0</code>就说明第<code>i</code>个元素只有一个，同时置<code>have=1</code>表示存在这样的元素。返回其索引。</p>
<pre><code class="language-c">int firstUniqChar(char * s) {
	// 得到长度
	int len = strlen(s);
	int have = 0;
	int i, j;
	for (i = 0; i &lt; len; i++) {
		int find = 0;
		for (j = 0; j &lt; len; j++) {
			if (i == j) continue;
			if (s[i] == s[j]) {
				find = 1;
				break;
			}
		}
		if (find == 0) {
			have = 1;
			break;
		}
	}
	return have ? i : -1;
}
</code></pre>
<p>另外，其他人用了更好的方法，也就是使用辅助数组，记录每个元素出现的次数，在上一篇数组内容中也出现了这个方法。我想到这个方法时，没有考虑周全，误以为在遍历辅助数组时，只能从<code>i=0 to n</code>遍历，导致不能确定第一个为<code>1</code>就是第一个元素。但是，完全可以按照原数组的元素排列进行遍历，也就是将<code>s[i]-'a'</code>作为遍历指针。</p>
<pre><code class="language-c">int firstUniqChar(char * s){
    int i, len = strlen(s);
    // 构造辅助数组
    int p[26];
    memset(p, 0, sizeof(int) * 26);
   // 首先根据原数组的元素出现情况进行填充
    for(i = 0; i &lt; len; i++){
        p[s[i] - 'a']++;
    }
    // 再由 s[i]-'a' 作为遍历指针遍历辅助数组，寻找第一个只出现一次的元素
    for(i = 0; i &lt; len; i++){
        if(p[s[i] - 'a'] == 1)
            return i;
    }
    return -1;
}
</code></pre>
<h2 id="有效的字母异位词">有效的字母异位词</h2>
<p>给定两个字符串 <em>s</em> 和 <em>t</em> ，编写一个函数来判断 <em>t</em> 是否是 <em>s</em> 的字母异位词。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;
输出: true
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: s = &quot;rat&quot;, t = &quot;car&quot;
输出: false
</code></pre>
<p><strong>说明:</strong><br>
你可以假设字符串只包含小写字母。</p>
<p><strong>进阶:</strong><br>
如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p>
<p><strong>代码</strong>:</p>
<p>这道题目让我想到了高中化学学的同分异构体，也就是所有对应的字母个数相同，但是排列方式不同。所以本道题采用辅助数组的形式，分别统计字符串<code>s</code>和<code>t</code>中每个字母出现的次数，接着再比较两个辅助数组是否相同即可。</p>
<pre><code class="language-c">bool isAnagram(char * s, char * t) {
	int lens = strlen(s);
	int lent = strlen(t);
	if (lens != lent)return  false;		// 如果长度不相等，之间返回错误

	// 下面用两个辅助数组，分别记录两个字符串中，每个字母出现的次数
	int temps[26], tempt[26];
	memset(temps, 0, sizeof(int) * 26);
	memset(tempt, 0, sizeof(int) * 26);

	// 开始统计数量
	int i;
	for (i = 0; i &lt; lens; i++) {
		temps[s[i] - 'a']++;
		tempt[t[i] - 'a']++;
	}
	// 比较辅助数组
	bool is = true;
	for (i = 0; i &lt; 26; i++) {	// 注意这个数组是26个元素
		if (temps[i] != tempt[i]) {
			is = false;
			break;
		}
	}

	return is;
}
</code></pre>
<h2 id="验证回文字符串">验证回文字符串</h2>
<p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>
<p>**说明：**本题中，我们将空字符串定义为有效的回文串。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: &quot;A man, a plan, a canal: Panama&quot;
输出: true
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: &quot;race a car&quot;
输出: false
</code></pre>
<p><strong>代码</strong>:</p>
<ul>
<li>构造函数<code>islod()</code>来判断现读取到的字符是否为字母或者数字；</li>
<li>现对字符串的字母进行大小写统一转换，便于比较，这里全部转为小写字母；</li>
<li>使用双指针分别从头和尾进行遍历，对于既不是数字也不是字母的字符忽略，然后比较两个指针所指元素是否相同。</li>
</ul>
<pre><code class="language-c">bool islod(char c) {
	return	
        ((c &gt;= 'a'&amp;&amp;c &lt;= 'z') || (c &gt;= 'A'&amp;&amp;c &lt;= 'Z') || (c &gt;= '0'&amp;&amp;c &lt;= '9')) ? true : false;
}

bool isPalindrome(char * s) {
    
	int lens = strlen(s);
	bool re = true;

	// 首先进行大小写转化方便判断
	int p;
	for (p = 0; p &lt; lens; p++) 
		if (s[p] &gt;= 'A'&amp;&amp;s[p] &lt;= 'Z') s[p] += 32;

	int f, l;
	for (f = 0, l = lens - 1; f &lt; l; f++, l--) {
		// 首先需要判断是否是有效字符
		while (!islod(s[f]) &amp;&amp; f &lt; l ) f++;	// 循环直到 f 为合法字符
		while (!islod(s[l]) &amp;&amp; f &lt; l ) l--;	// 循环直到 l 为合法字符
        
        // 然后判断一下f l避免越界
		if ( !(f &lt; l) ) break;
        
		// 再进行判断
		if (s[f] != s[l]) {
			re = false;
			break;
		}
	}
	return re;
}

</code></pre>
<h2 id="字符串转换整数atoi">字符串转换整数(atoi)</h2>
<p>请你来实现一个 <code>atoi</code> 函数，使其能将字符串转换成整数。</p>
<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：</p>
<ul>
<li>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。</li>
<li>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。</li>
<li>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。</li>
</ul>
<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</p>
<p>在任何情况下，若函数不能进行有效的转换时，请返回 0 。</p>
<p><strong>提示：</strong></p>
<ul>
<li>本题中的空白字符只包括空格字符 <code>' '</code> 。</li>
<li>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</li>
</ul>
<p><strong>示例 1:</strong></p>
<pre><code>输入: &quot;42&quot;
输出: 42
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: &quot;   -42&quot;
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
</code></pre>
<p><strong>示例 3:</strong></p>
<pre><code>输入: &quot;4193 with words&quot;
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
</code></pre>
<p><strong>示例 4:</strong></p>
<pre><code>输入: &quot;words and 987&quot;
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
</code></pre>
<p><strong>示例 5:</strong></p>
<pre><code>输入: &quot;-91283472332&quot;
输出: -2147483648
解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (−231) 。
</code></pre>
<p><strong>代码</strong>:</p>
<p>这个题目写了很久，最后...还是学习学习别人写的吧...这个判断溢出的方法真的很巧妙，在以前都是直接暴力判断溢出的，因为很多题目假设只有32位，所以直接用数判断未免属于不合法的手段。</p>
<pre><code class="language-c">int myAtoi(char * str) {
	// 移除开头的空格
	while (*str == ' ') ++str;  // 此时 str 指向第一个不为空格的字符 

	// 如果带有正负号，记录正负性
	int flag = 1;
	if (*str == '-') {
		flag = -1;
		++str;
	} else if (*str == '+')
		++str;

	int ret = 0;
	// 因为只能使用 32 位 int，因此将 ret 乘 10 后再与 INT_MAX 比较可能会溢出
	// 因此使用 ret 与 INT_MAX/10 比较
	int div = INT_MAX / 10;
	while (*str &lt;= '9' &amp;&amp; *str &gt;= '0') {
		int dig = *str - '0';
		// 若 ret 比 div 小，则 ret * 10 + dig 也一定小于 INT_MAX，不会溢出
		// 若 ret 与 div 相等，只有 dig 比 8 小时不会溢出
		// 此处本来需要正负分开讨论，INT_MAX 个位是 7，INT_MIN 个位是 8
		// -INT_MIN 在 int 中会溢出，当 dig == 8 时直接当作溢出处理
		if (ret &lt; div || (ret == div &amp;&amp; dig &lt; 8)) {
			ret = ret * 10 + dig;
			++str;
		}
		// 溢出，根据正负性返回值
		else
			return (flag == 1 ? INT_MAX : INT_MIN);
	}
	return flag * ret;
}
</code></pre>
<h2 id="实现strstr">实现strStr()</h2>
<p>实现 <a href="https://baike.baidu.com/item/strstr/811469">strStr()</a> 函数。</p>
<p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  <strong>-1</strong>。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: haystack = &quot;hello&quot;, needle = &quot;ll&quot;
输出: 2
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;
输出: -1
</code></pre>
<p><strong>说明:</strong></p>
<p>当 <code>needle</code> 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p>
<p>对于本题而言，当 <code>needle</code> 是空字符串时我们应当返回 0 。这与C语言的 <a href="https://baike.baidu.com/item/strstr/811469">strstr()</a> 以及 Java的 <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)">indexOf()</a> 定义相符。</p>
<p><strong>代码</strong>:</p>
<p>KMP，双100%，永远滴神！我觉得书上讲的都比较含糊，可以找视频来看一下这个算法，主要是求<code>next</code>数组。</p>
<pre><code class="language-c">/* 前缀表  */
void prefix_table(char pattern[], int prefix[], int n) {

	prefix[0] = 0;
	int len = 0;
	int i = 1;

	while (i &lt; n) {
		if (pattern[i] == pattern[len]) {
			len++;
			prefix[i] = len;
			i++;
		}
		else {
			if (len &gt; 0) {
				len = prefix[len - 1];
			}
			else {
				prefix[i] = len;
				i++;
			}
		}
	}
}
/* 左移前缀表 */
void move_prefix_table(int prefix[], int n) {
	int i;
	for (i = n - 1; i &gt; 0; i--) {
		prefix[i] = prefix[i - 1];
	} 
	prefix[0] = -1;
}

/* kmp search */
int kmp_search(char text[], char pattern[]) {
	int n = strlen(pattern);
	int m = strlen(text);
	int *prefix = malloc(sizeof(int)*n);

	prefix_table(pattern, prefix, n);
	move_prefix_table(prefix, n);

	/*
	text[i]		len(text) = m
	pattern[j]	len[pattern] = n
	*/
	int i = 0, j = 0;

	while (i &lt; m) {
		if (j == n - 1 &amp;&amp; text[i] == pattern[j]) {
			/*printf(&quot;%d&quot;, i - j);
			j = prefix[j];*/
			return i - j;
		}
		if (text[i] == pattern[j]) {
			i++;
			j++;
		}
		else {
			j = prefix[j];
			if (j == -1) {
				i++;
				j++;
			}
		}
	}

	return -1;
}

int strStr(char * haystack, char * needle) {

    int lenn = strlen(needle);
	if (lenn == 0) {
		return 0;
	}
    
	return kmp_search(haystack, needle);

}
</code></pre>
<h2 id="外观数列">外观数列</h2>
<p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。前五项如下：</p>
<pre><code>1.     1
2.     11
3.     21
4.     1211
5.     111221
</code></pre>
<p><code>1</code> 被读作  <code>&quot;one 1&quot;</code>  (<code>&quot;一个一&quot;</code>) , 即 <code>11</code>。<br>
<code>11</code> 被读作 <code>&quot;two 1s&quot;</code> (<code>&quot;两个一&quot;</code>）, 即 <code>21</code>。<br>
<code>21</code> 被读作 <code>&quot;one 2&quot;</code>,  &quot;<code>one 1&quot;</code> （<code>&quot;一个二&quot;</code> ,  <code>&quot;一个一&quot;</code>) , 即 <code>1211</code>。</p>
<p>给定一个正整数 <em>n</em>（1 ≤ <em>n</em> ≤ 30），输出外观数列的第 <em>n</em> 项。</p>
<p>注意：整数序列中的每一项将表示为一个字符串。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: 1
输出: &quot;1&quot;
解释：这是一个基本样例。
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: 4
输出: &quot;1211&quot;
解释：当 n = 3 时，序列是 &quot;21&quot;，其中我们有 &quot;2&quot; 和 &quot;1&quot; 两组，&quot;2&quot; 可以读作 &quot;12&quot;，也就是出现频次 = 1 而 值 = 2；类似 &quot;1&quot; 可以读作 &quot;11&quot;。所以答案是 &quot;12&quot; 和 &quot;11&quot; 组合在一起，也就是 &quot;1211&quot;。
</code></pre>
<p><strong>代码</strong>:</p>
<p>这个题目比较有意思。</p>
<p>使用了两个数组，数组<code>res</code>作为结果项和初始项，数组<code>tmp</code>作为对<code>res</code>处理后的进行保存的中间项，然后每一轮结束时，将数组<code>tmp</code>的内容复制到<code>res</code>中，再下一轮以<code>res</code>作为初始串进行处理。</p>
<pre><code class="language-c">char * countAndSay(int n) {
	char *res = (char*)malloc(sizeof(char) * 5000);
	char *tmp = (char*)malloc(sizeof(char) * 5000);
	res[0] = '1'; res[1] = '\0';     // res 初始化为 &quot;1&quot;
	int len = 1;                     // len 为 res 的有效长度
	while (--n) {
		int i = 0, j = 0;
		while (i &lt; len) {             // 对 res 的每位字符 c 进行报数
			int count = 1;
			char c = res[i++];
			while (i &lt; len &amp;&amp; res[i] == c)    // 计算本轮报数结果，即本轮有几个 c
				i++, count++;
			tmp[j++] = count + '0';           // 将报数结果存入 tmp
			tmp[j++] = c;
		}
		tmp[j] = '\0';
		strcpy(res, tmp);                     // 将 tmp 复制到 res，并更新 res 长度
		len = j;
	}
	return res;
}
</code></pre>
<h2 id="最长公共前缀">最长公共前缀</h2>
<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]
输出: &quot;fl&quot;
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]
输出: &quot;&quot;
解释: 输入不存在公共前缀。
</code></pre>
<p><strong>说明:</strong></p>
<p>所有输入只包含小写字母 <code>a-z</code> 。</p>
<p><strong>代码</strong>:</p>
<p>本题使用暴力法，但是由于公共前缀的问题，使用暴力法的时间表现还可以。求最短的元素，以其长度为基准进行搜索。然后双重循环求公共前缀。</p>
<pre><code class="language-c">char * longestCommonPrefix(char ** strs, int strsSize) {

    if(strsSize==0) {
        char *p = &quot;&quot;;
        return p;
    }
    if(strsSize==1) return strs[0];
    
	// 先找出最短的元素
	int minlen = strlen(strs[0]);
	int i;
	for (i = 1; i &lt; strsSize; i++) {
		if (minlen &gt; strlen(strs[i])) {
			minlen = strlen(strs[i]);
		}
	}

	// 循环求解找最长公共前缀
	int front, j;
	bool valid = true;
	for (front = 0; front &lt; minlen; front++) {
		for (j = 0; j &lt; strsSize - 1; j++) {
			if (strs[j][front] != strs[j + 1][front]) {
				valid = false;
				break;
			}
		}
		if (!valid) break;
	}

	// 此时，front为 最长公共前缀的长度,假设最大1000
	char res[1000];
	char *restr = res;
	memset(res, 0, sizeof(res));

	printf(&quot;%d&quot;, strlen(res));
	int k;
	for (k = 0; k &lt; front; k++) {
		res[k] = strs[0][k];
	}

	return restr;
}
</code></pre>
<p>我这样做麻烦了...列垂直扫描不用那么麻烦。唉 <strong>):</strong></p>
<pre><code class="language-c">char * longestCommonPrefix(char ** strs, int strsSize){
    if(strsSize==0) return &quot;&quot;;  //如果字符串数组为空，直接返回&quot;&quot;
    for(int i=0;i&lt;strlen(strs[0]);i++){   //i表示列，strlen(strs[0])表示第一个字符串长度
        for(int j=1;j&lt;strsSize;j++){    //j表示行
            if(strs[0][i]!=strs[j][i]){ //如果比较字符串的第i列不同，该列结束，直接跳出
                strs[0][i]='\0';
                break;
            }
        }
    }
    return strs[0];
}

作者：cmtsa
链接：https://leetcode-cn.com/problems/longest-common-prefix/solution/cchui-zhi-sao-miao-chao-duan-dai-ma-by-cmtsa/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[leetcode数组初等整理]]></title>
        <id>https://lizonglin313.github.io/post/leetcode-shu-zu-chu-deng-zheng-li</id>
        <link href="https://lizonglin313.github.io/post/leetcode-shu-zu-chu-deng-zheng-li">
        </link>
        <updated>2020-05-11T11:48:37.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>好久没有更新了，最近开始做了些leetcode上的算法，刚把数组基础部分做完，整理一下，全部用的C</p>
</blockquote>
<h2 id="删除排序数组中的重复项">删除排序数组中的重复项</h2>
<p>给定一个排序数组，你需要在 <strong>原地</strong> 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在 <strong>原地 修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p>
<p><strong>示例 1:</strong></p>
<pre><code>给定数组 nums = [1,1,2], 

函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 

你不需要考虑数组中超出新长度后面的元素。
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>给定 nums = [0,0,1,1,1,2,2,3,3,4],

函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

你不需要考虑数组中超出新长度后面的元素。
</code></pre>
<p><strong>说明:</strong></p>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<pre><code>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);

// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
for (int i = 0; i &lt; len; i++) {
    print(nums[i]);
}
</code></pre>
<p><strong>代码</strong>:</p>
<p>快慢双指针的思想，快指针从下标<code>1</code>处开始遍历数组，而慢指针始终指向<code>没有重复元素的前last+1项序列</code>的最后一个元素。</p>
<pre><code class="language-c">int removeDuplicates(int* nums, int numsSize){
	int fast, last;	// 双指针

    if(numsSize==0){
        return 0;
    }
    
	for (last=0,fast = 1; fast &lt; numsSize; fast++){

		if (nums[last] != nums[fast]) {
            /* 如果指的元素不同，就将fast所指的元素给last所指的后一个元素，当然，需要last事先增一 */
			nums[++last] = nums[fast];
		}

	}

	return last + 1;
}

</code></pre>
<h2 id="买卖股票的最佳时机-ii">买卖股票的最佳时机 II</h2>
<p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p>
<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>
<p>**注意：**你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
</code></pre>
<p><strong>示例 3:</strong></p>
<pre><code>输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
</code></pre>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= prices.length &lt;= 3 * 10 ^ 4</code></li>
<li><code>0 &lt;= prices[i] &lt;= 10 ^ 4</code></li>
</ul>
<p><strong>代码</strong>:</p>
<p>在做这道题目时，我进入了一个误区，就是老想着找这样一个子序列：<code>子序列最后一个元素 - 子序列第一个元素的值最大</code>。例如：<code>[6 3 4 1 2 3 4 5 6]</code>中<code>sub[1 2 3 4 5 6]</code>这个序列，我们只要确定<code>1</code>和<code>6</code>的位置就能得到结果。显然我想复杂了，这个结果<code>6-1=5</code>实际上与<code>2-1 + 3-2 + 4-3 + 5-4 + 6-5 = 5</code>是一样的。</p>
<p>所以，我们只需每次找相邻的两个数，这两个数符合前一个数比后一个数小即可，符合就计算<code>last-front</code>的值，加到利润里，继续考察下一组数就可以。</p>
<pre><code class="language-c">int maxProfit(int* prices, int pricesSize) {

    /* 不要忘记特殊情况 */
	if (pricesSize &lt; 2) {
		return 0;
	}

	int td_price = prices[0];	// td_price为当天价格，从第 prices[0]开始
	int pro = 0;				// 初始利润设置为 pro=0

	for (int i = 1; i &lt; pricesSize; i++)
	{
        /* 从第二天开始，如果明天的价格高于今天，就买，利润增加 */
		if (prices[i] &gt; td_price) {
			pro += (prices[i] - td_price);
		}
        /* 过一天，明天变今天 */
		td_price = prices[i];

	}
	return pro;
}
</code></pre>
<h2 id="旋转数组">旋转数组</h2>
<p>给定一个数组，将数组中的元素向右移动 <em>k</em> 个位置，其中 <em>k</em> 是非负数。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: [-1,-100,3,99] 和 k = 2
输出: [3,99,-1,-100]
解释: 
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]
</code></pre>
<p><strong>说明:</strong></p>
<ul>
<li>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。</li>
<li>要求使用空间复杂度为 O(1) 的 <strong>原地</strong> 算法。</li>
</ul>
<p><strong>代码</strong>:</p>
<p>我认为这道题目的一个解法是非常巧妙的，利用三次逆序，我是没有想到....</p>
<p>例如示例1中输入 <code>[1,2,3,4,5,6,7]</code> 和<code>k = 3</code>输出<code>[5,6,7,1,2,3,4]</code>。只需要先对前<code>7-3=4</code>个数进行逆序得到<code>[4,3,2,1,5,6,7]</code>再对后<code>k=3</code>个数进行逆序得到<code>[4,3,2,1,7,6,5]</code>，最后再对整个数组进行逆序<code>[5,6,7,1,2,3,4]</code>就得到结果了。</p>
<pre><code class="language-c">/* 逆序函数，注意下标的操作 */
void reverse(int *arr, int left, int right) {

	for (int i = 0; i &lt; (right - left + 1) / 2; i++)
	{
		int temp = arr[right - i];
		arr[right - i] = arr[left + i];
		arr[left + i] = temp;
	}

}
/* 进行旋转 */
void rotate(int* nums, int numsSize, int k) {

    // 注意特殊情况的处理
	if (numsSize == 0 || !nums) {
		return;
	}

    // 以防循环次数 &gt; numsSize
     k = k % numsSize;
    
	reverse(nums, 0, numsSize - k - 1);
	reverse(nums, numsSize - k, numsSize - 1);
	reverse(nums, 0, numsSize - 1);
}
</code></pre>
<h2 id="存在重复元素">存在重复元素</h2>
<p>给定一个整数数组，判断是否存在重复元素。</p>
<p>如果任意一值在数组中出现至少两次，函数返回 <code>true</code> 。如果数组中每个元素都不相同，则返回 <code>false</code> 。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: [1,2,3,1]
输出: true
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: [1,2,3,4]
输出: false
</code></pre>
<p><strong>示例 3:</strong></p>
<pre><code>输入: [1,1,1,3,3,4,3,2,4,2]
输出: true
</code></pre>
<p><strong>代码</strong>:</p>
<p>这道题目一开始构造Map来遍历统计每个值出现的次数，但是(我觉得)没有必要(对于C这种没有Map结构的来说)。就采取了先排序，后验证是否有相邻元素相同的方法来判断。</p>
<p>一开始我是用了快排，结果一直超时，于是改成了归并。</p>
<pre><code class="language-c">#define MAX 1000000
int temp_arr[MAX] = { 0 };

/* merge two arr */
void merge(int begin, int middle, int end, int arr1[], int arr2[]);
/* sort arr with merge sort */
void merge_sort(int arr[], int begin, int end);

bool containsDuplicate(int* nums, int numsSize) {

	if (numsSize &lt;= 1) return false;	// 注意特殊情况
	
	merge_sort(nums, 0, numsSize - 1);	// 先进行排序

	for (int i = 0; i &lt; numsSize - 1; i++) {
		if (nums[i] == nums[i+1]) {
			return true;
		}
	}
	return false;
}

/* merge two arr */
void merge(int begin, int middle, int end, int arr1[], int arr2[]) {

	int i = begin;
	int j = middle + 1;
	int k = begin;

	while (i &lt;= middle &amp;&amp; j &lt;= end) {
		if (arr1[i] &lt;= arr1[j]) {

			arr2[k++] = arr1[i++];

		}
		else
		{
			arr2[k++] = arr1[j++];
		}
	}

	while (i &lt;= middle)	arr2[k++] = arr1[i++];
	while (j &lt;= end)	arr2[k++] = arr1[j++];

}

/* sort arr with merge sort */
void merge_sort(int arr[], int begin, int end) {

	int m;

	if (begin == end) {

		return;	// if begin==end -&gt; arr has one number,over

	}
	else {

		m = (begin + end) / 2;
		merge_sort(arr, begin, m);		// sorted front part of arr
		merge_sort(arr, m + 1, end);	// sorted latter part of arr 
		merge(begin, m, end, arr, temp_arr);	//merge arr
		for (int i = begin; i &lt;= end; i++) {
			arr[i] = temp_arr[i];
		}
	}
}


</code></pre>
<h2 id="只出现一次的数字">只出现一次的数字</h2>
<p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p><strong>说明：</strong></p>
<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: [2,2,1]
输出: 1
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: [4,1,2,1,2]
输出: 4
</code></pre>
<p><strong>代码</strong>:</p>
<p>同样的，我也采用了先排序，后判断一个数的<code>前后元素</code>是否等于这个数的方法。由于归并排序上一题中已经给出，便不再叙述详细实现过程。</p>
<pre><code class="language-c">int singleNumber(int* nums, int numsSize) {

    // 特殊情况的处理
	if (numsSize == 1)
	{
		return nums[0];
	}

	// 先排序
	merge_sort(nums, 0, numsSize - 1);

    // 首末元素不好判断，就先进行判断
	if (nums[0] != nums[1] &amp;&amp; nums[1]==nums[2]) {
		return nums[0];
	}
	else if (nums[numsSize-1] != nums[numsSize-2]) {
		return nums[numsSize - 1];
	}

	// 在这之前先判断第一个数和最后一个数
	for (int i = 1; i &lt; numsSize - 1; i++)
	{
        // 判断前后元素是否等于这个数
		if (nums[i] != nums[i - 1] &amp;&amp; nums[i] != nums[i + 1]) {
			return nums[i];
		}

	}
    
    // 如果此处没有返回，会报错，便随便加上一句，理论上不会走到这里
    return -1;
	
}
</code></pre>
<h2 id="两个数组的交集">两个数组的交集</h2>
<p>给定两个数组，编写一个函数来计算它们的交集。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: nums1 = [1,2,2,1], nums2 = [2,2]
输出: [2,2]
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出: [4,9]
</code></pre>
<p><strong>说明：</strong></p>
<ul>
<li>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。</li>
<li>我们可以不考虑输出结果的顺序。</li>
</ul>
<p><strong>进阶:</strong></p>
<ul>
<li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li>
<li>如果 <em>nums1</em> 的大小比 <em>nums2</em> 小很多，哪种方法更优？</li>
<li>如果 <em>nums2</em> 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li>
</ul>
<p><strong>代码</strong>:</p>
<p>进阶部分尚未考虑。</p>
<p>在这里，我用到了双重循环，所以在效率上不是很理想。</p>
<ul>
<li>首先以<code>nums1</code>的长度为基准，构造新的结果数组<code>numret</code>；</li>
<li>遍历<code>nums1</code>数组，<code>i</code>为遍历指针；
<ul>
<li>判断<code>nums1</code>、<code>nums2</code>、<code>numret</code>中元素<code>nums1[i]的</code>个数，分别存入<code>n1</code>、<code>n2</code>、<code>n3</code>；</li>
<li>如果<code>n3=0</code>代表结果数组中还没有这个元素，于是判断<code>n1</code>、<code>n2</code>，以小的那一个作为存入的次数，存入<code>numret</code>中即可；</li>
<li>当然，如果<code>n3!=0</code>就说明我们在前面已经找过这个元素了，也就是我们只在首次遇到这个元素时就把它后面也出现的情况处理了</li>
</ul>
</li>
</ul>
<pre><code class="language-c">/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

/* 判断元素在数组中出现几次 */
int If_In_Array(int number, int numsSize, int *nums) ；

int* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {

	/* 以nums1的长度构建数组 */
	int *numret = (int*)malloc(sizeof(int)*nums1Size);

	int i3 = 0;	// i3作为结果数组的下标，刚好可以统计结果数组中元素的个数

	for (int i1 = 0; i1 &lt; nums1Size; i1++)
	{
		int n1 = 0, n2 = 0, n3 = 0;
		n1 = If_In_Array(nums1[i1], nums1Size, nums1);
		n2 = If_In_Array(nums1[i1], nums2Size, nums2);
		n3 = If_In_Array(nums1[i1], i3, numret);

		if (n3 == 0) {
			if (n1 == n2) for (int p = 0; p &lt; n1; p++) numret[i3++] = nums1[i1];
			else if (n1 &gt; n2) for (int p = 0; p &lt; n2; p++) numret[i3++] = nums1[i1];
			else if (n1 &lt; n2)for (int p = 0; p &lt; n1; p++) numret[i3++] = nums1[i1];
		}
	}

	*returnSize = i3;

	return numret;

}
/* 判断元素在数组中出现几次 */
int If_In_Array(int number, int numsSize, int *nums) {

	int count = 0;

	for (int i = 0; i &lt; numsSize; i++)
	{
		if (nums[i] == number) count++;
	}

	return count;

}
</code></pre>
<h2 id="加一">加一</h2>
<p>给定一个由<strong>整数</strong>组成的<strong>非空</strong>数组所表示的非负整数，在该数的基础上加一。</p>
<p>最高位数字存放在数组的首位， 数组中每个元素只存储<strong>单个</strong>数字。</p>
<p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: [1,2,3]
输出: [1,2,4]
解释: 输入数组表示数字 123。
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: [4,3,2,1]
输出: [4,3,2,2]
解释: 输入数组表示数字 4321。
</code></pre>
<p><strong>代码</strong>:</p>
<p>我犯了一个大错误：一开始我想将数组内容先转换成整数类型，然后整数加一，再进行拆分重新存入数组。结果发生了溢出，于是我改成<code>long</code>甚至<code>long long</code>，无一例外，它还是溢出了，谁能保证这个数组长度没有10k位呢，计算机怎么存一个10k位的数值类型？</p>
<p>还是直接操作数组吧：</p>
<ul>
<li>注意判断数组元素是否全是<code>9</code>，例如<code>[9,9,9,9]</code>在申请结果数组时需要多申请一个位置，而<code>[8,9,9,9]</code>就不需要(这一步可不用一开始就进行)；</li>
<li>首先，对于首位进位有两种情况，需要先处理一下，一是全是<code>9</code>，二是除了首元素之外全是<code>9</code>；</li>
<li>如果全是<code>9</code>申请长一个单位的数组，首位置<code>1</code>，剩余填<code>0</code>，完成；</li>
<li>如果除首位全是<code>9</code>，申请通长度数组，首位加<code>1</code>，其余位填<code>0</code>，完成；</li>
<li>剩下的情况就是一般情况了，从数组末位开始向前遍历，只要遇到一位不是<code>9</code>就加<code>1</code>退出循环，完成，否则遇到<code>9</code>就置零，进行下一次循环。</li>
</ul>
<pre><code class="language-c">int* plusOne(int* digits, int digitsSize, int* returnSize) {

	//  基本思路 逢 9 进一 不为9 +1 然后结束

	// 1 先判断是否全为9 分两种情况 1）全为9 2） 第一位不是9
	int is9 = 1;
	for (int i = 1; i &lt; digitsSize; i++) 
		if (digits[i] != 9) {
			is9 = 0;
			break;
		}
	if (is9 == 1) {
		if (digits[0] == 9) {
			// 如果第一位也是9
			// 此时全为9
			int *redigits = (int*)malloc(sizeof(int)*(digitsSize + 1));
			redigits[0] = 1;
			for (int i = 1; i &lt; digitsSize + 1; i++)
			{
				redigits[i] = 0;
			}
			*returnSize = digitsSize + 1;
			return redigits;
		}
		else{
			// 此时第一位不是9
			int *redigits = (int*)malloc(sizeof(int)*(digitsSize));
			redigits[0] = digits[0] + 1;
			for (int i = 1; i &lt; digitsSize; i++)
			{
				redigits[i] = 0;
			}
			*returnSize = digitsSize;
			return redigits;
		}
		
	}

	// 如果有一位不是9
	int *redigits = (int*)malloc(sizeof(int)*(digitsSize));
	redigits = digits;
	/*for (int n = 0; n &lt; digitsSize; n++) {
		redigits[n] = digits[n];

	}*/
	for (int p = digitsSize - 1; p &gt; -1; p--) {
		if (redigits[p] == 9) {
			redigits[p] = 0;
            continue;
		}
		if (redigits[p] != 9) {
			redigits[p] = redigits[p] + 1;
            break;
		}
	}
	*returnSize = digitsSize;
	return redigits;
}
</code></pre>
<h2 id="移动零">移动零</h2>
<p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p><strong>示例:</strong></p>
<pre><code>输入: [0,1,0,3,12]
输出: [1,3,12,0,0]
</code></pre>
<p><strong>说明</strong>:</p>
<ol>
<li>必须在原数组上操作，不能拷贝额外的数组。</li>
<li>尽量减少操作次数。</li>
</ol>
<p><strong>代码</strong>:</p>
<p>使用的是数组题目中常用的快慢指针，慢指针始终指向数组中第一个<code>0</code>，快指针作为遍历指针，如果快指针指的元素不为<code>0</code>那么交换两个指针所指的元素，慢指针增一。</p>
<pre><code class="language-c">void moveZeroes(int* nums, int numsSize) {
	int k = 0;
	for (int i = 0; i &lt; numsSize; i++)
	{
		if (nums[i] != 0) {
            int t = nums[k];
			nums[k++] = nums[i];
			nums[i] = t;
		}
	}
}
</code></pre>
<h2 id="两数之和">两数之和</h2>
<p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>
<p><strong>示例:</strong></p>
<pre><code>给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]
</code></pre>
<p><strong>代码</strong>:</p>
<p>emmmm这个做的时候没多想暴力做的，二重循环...</p>
<pre><code class="language-c">/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
	/* 先处理一下特殊情况 */
    if (numsSize == 0) {
		*returnSize = 0;
		return NULL;
	}
	else if (numsSize == 1) {
		int *ret1 = (int*)malloc(sizeof(int) * 1);
		ret1[0] = 0;
		*returnSize = 1;
		return ret1;
	}
    
	int *ret = (int*)malloc(sizeof(int) * 2);
    
	for (int i = 0; i &lt; numsSize; i++)
	{
		for (int j = 0; j &lt; numsSize; j++) {
	
			if (i == j) continue;
			else{
				if (nums[i] + nums[j] == target) {
					ret[0] = i;
					ret[1] = j;
				}
			}
		}
	}
	*returnSize = 2;
	return ret;
}
</code></pre>
<p>这个题有好多佬用hash table做的，时间上很快。</p>
<h2 id="有效的数独">有效的数独</h2>
<blockquote>
<p>到这里多少做的不是很顺了，总是少考虑东西</p>
</blockquote>
<p>判断一个 9x9 的数独是否有效。只需要<strong>根据以下规则</strong>，验证已经填入的数字是否有效即可。</p>
<ol>
<li>数字 <code>1-9</code> 在每一行只能出现一次。</li>
<li>数字 <code>1-9</code> 在每一列只能出现一次。</li>
<li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="img" loading="lazy"></figure>
<p>上图是一个部分填充的有效的数独。</p>
<p>数独部分空格内已填入了数字，空白格用 <code>'.'</code> 表示。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入:
[
  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],
  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],
  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],
  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],
  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],
  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],
  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],
  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],
  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]
]
输出: true
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入:
[
  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],
  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],
  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],
  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],
  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],
  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],
  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],
  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],
  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
</code></pre>
<p><strong>说明:</strong></p>
<ul>
<li>一个有效的数独（部分已被填充）不一定是可解的。</li>
<li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li>
<li>给定数独序列只包含数字 <code>1-9</code> 和字符 <code>'.'</code> 。</li>
<li>给定数独永远是 <code>9x9</code> 形式的。</li>
</ul>
<p><strong>代码</strong>:</p>
<ul>
<li>对于判断一行/列中是否存在相同元素，构造辅助二维数组，只不过二维数组每一行每一个元素代表原数组中这一行中的元素出现的次数，举个例子吧，原数组第一行<code>[1，2，.，.，4，.，4，.，.]</code>这样，那么辅助数组这样<code>[0，1，1，0，2，...]</code>没错，下标为<code>4</code>的位置为<code>2</code>，也就是<code>4</code>出现了两次，对于列，同理；</li>
<li>如何判断<code>3x3</code>的子块中有重复元素呢？也用一个二维数组，公式<code>(i / 3) * 3 + (j / 3)</code>巧妙的把位于同一个子块的元素的二维值转化为统一的一维值，也就是说，例如左上角<code>(0,0)(0,1)(0,2)(1,0)(1,1)(1,2)(2,0)(2,1)(2,2)</code>都转化成<code>0</code>了，就作为辅助数组的行下标，列下标同样的用原数组的元素值代表。</li>
</ul>
<pre><code class="language-c">bool isValidSudoku(char** board, int boardSize, int* boardColSize) {

	int row[9][10] = { 0 };
	int arr[9][10] = { 0 };
	int box[9][10] = { 0 };

	for (int i = 0; i &lt; 9; i++) {
		for (int j = 0; j &lt; 9; j++) {
			if (board[i][j] != '.') {
				int num = board[i][j] - '0';		// 得到此数字对应的整数值
				row[i][num]++;						// 代表 在第i行 数字 num 出现次数 +1
				arr[j][num]++;						// 代表 在第j列 数字 num 出现次数 +1
				box[(i / 3) * 3 + (j / 3)][num]++;	// 代表 在第(i / 3) * 3 + (j / 3)个小九宫格中 数字 num 出现次数 +1
				if ((row[i][num] &gt; 1) || (arr[j][num] &gt; 1) || (box[(i / 3) * 3 + (j / 3)][num] &gt; 1)) {	
					return false;
				}
			}
		}
	}
	return true;
}
</code></pre>
<h2 id="旋转图像">旋转图像</h2>
<p>给定一个 <em>n</em> × <em>n</em> 的二维矩阵表示一个图像。</p>
<p>将图像顺时针旋转 90 度。</p>
<p><strong>说明：</strong></p>
<p>你必须在<strong>原地</strong>旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong>使用另一个矩阵来旋转图像。</p>
<p><strong>示例 1:</strong></p>
<pre><code>给定 matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

原地旋转输入矩阵，使其变为:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>给定 matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
], 

原地旋转输入矩阵，使其变为:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]
</code></pre>
<p><strong>代码</strong>:</p>
<p>这里对操作二重指针和二维数组出现了迷糊，C的指针稍稍操作复杂一些还是好难懂...</p>
<p>我认为很巧妙的方法，对矩阵进行行变换，然后再进行转置(先进行转置，再对矩阵进行列变换也可以得到一样的结果)，没有仔细的观察、并且对矩阵不敏感的情况下很难发现这个规律。</p>
<p>进行矩阵转置是要注意下标的处理，在进行行变换时巧妙的运用一级指针(如果进行列变换就没有这么容易了，所以说先进行行变换再进行转置是相对比较方便的)。</p>
<pre><code class="language-c">void rotate(int** matrix, int matrixSize, int* matrixColSize) {

	// 先变换行，因为每一行可以作为一整块，在存储操作上比较方便
	for (int i = 0, j = matrixSize - 1; i &lt; j; ++i, --j)   /* 将矩阵的第i行和第j行互换 */
		swap_row(matrix, matrixSize, i, j);

	// 再对矩阵进行转置
	transposed_matrix(matrix, matrixSize);
	
}

/* 求转置矩阵 */
void transposed_matrix(int **matrix, int matrixSize) {

	for (int i = 0; i &lt; matrixSize; i++) {
		for (int j = i; j &lt; matrixSize; j++) {
			int temp = matrix[i][j];
			matrix[i][j] = matrix[j][i];
			matrix[j][i] = temp;
		}
	}
}

/* 将矩阵第i行和第size-i行互换 */
void swap_row(int **matrix, int matrixSize, int i, int j) {

	// 申请存储单元，方便按行存储，只需交换指针，即可每次操作改变一行
	int *t = (int*)malloc(sizeof(int)*matrixSize);
	t = matrix[i];
	matrix[i] = matrix[j];
	matrix[j] = t;

}
</code></pre>
]]></content>
    </entry>
</feed>