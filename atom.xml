<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lizonglin313.github.io/</id>
    <title>Big Carrot</title>
    <updated>2021-02-07T15:34:24.296Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lizonglin313.github.io/"/>
    <link rel="self" href="https://lizonglin313.github.io/atom.xml"/>
    <subtitle>人们依然相信 什么未来会更精彩</subtitle>
    <logo>https://lizonglin313.github.io/images/avatar.png</logo>
    <icon>https://lizonglin313.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Big Carrot</rights>
    <entry>
        <title type="html"><![CDATA[Golang的指针]]></title>
        <id>https://lizonglin313.github.io/post/golang-de-zhi-zhen</id>
        <link href="https://lizonglin313.github.io/post/golang-de-zhi-zhen">
        </link>
        <updated>2021-02-07T13:53:10.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>很多主流语言中都有指针作为变量的一种，go也不例外。一方面，go保留了例如c、cpp等语言的严谨性，同时兼有python、函数式编程语言的灵活性；针对长历史的语言，去其糟粕取其精华，依然保留了指针。</p>
</blockquote>
<h2 id="值传递和引用传递">值传递和引用传递</h2>
<p>相信在初学c语言时，指针对于大部分人来说有些难以理解，尤其是不了解计算机底层的人，传值、传地址难以区分。c和cpp中，指针操作有<strong>传值</strong>和**传引用（地址）**两种方式。</p>
<ul>
<li>传值</li>
</ul>
<p>传值就是传递变量的值，相当于把这个变量复制一份，用于函数域中的操作。函数域之外，变量的值不受影响。</p>
<ul>
<li>传引用</li>
</ul>
<p>传引用，也叫传地址，在某个函数中操作以引用方式传进去的变量，会改变变量实际的值，也就是在函数域之外，变量的值也会被改变。</p>
<pre><code class="language-c++">void con_value(int num){
    num++;
}

void con_refer(int &amp;a){
    num++;
}

int main(){
    int num = 1;
    con_value(num);
    printf(&quot;n1 = %d\n&quot;, num);
    
    con_refer(num);
    printf(&quot;n2 = %d\n&quot;, num);
}
</code></pre>
<p><code>con_value()</code>就是值传递，<code>con_refer()</code>就是传引用。执行<code>main()</code>函数后，<code>n1 = 1</code>因为传入的只是值，相当于<code>con_value()</code>把<code>num</code>复制了一份用来操作，实际上函数的作用域之外<code>num</code>没有变；<code>n2 = 2</code>，<code>con_refer()</code>则是传入的引用，直接使用了<code>num</code>，所以无论函数内还是外，<code>num</code>的值都发生的改变。</p>
<h2 id="go中的指针">go中的指针</h2>
<p>在go语言中，指针只有<strong>值传递</strong>这一种，也就是函数做的只是拷贝，然后再使用。</p>
<h4 id="情况一函数内改变不影响函数外">情况一：函数内改变不影响函数外</h4>
<pre><code class="language-go">var a int
fun f(a int){
    ...
}
</code></pre>
<p>这种情况下，<code>f()</code>中对<code>a</code>的改变不会影响的外面的<code>a</code>，因为是拷贝过去的。</p>
<h4 id="情况二通过指针改变变量实际的值通过传递指针达到引用传递的效果">情况二：通过指针改变变量实际的值（通过传递指针达到引用传递的效果）</h4>
<pre><code class="language-go">var na int = 2
var pa *int = &amp;na

func f(pa *int) {
	*pa++
	fmt.Println(*pa)
}
</code></pre>
<p>首先，<code>na</code>是<code>int</code>型变量，而<code>pa</code>是指向<code>na</code>地址的指针，我们通过传入一个指针来改变变量的值。同样以值传递的思想，函数<code>f()</code>拷贝了一份<code>pa</code>，但是无论怎么拷贝，拷贝出的东西它都是指向<code>na</code>的地址的，所以通过传一个指针就可以改变对应地址的值，函数外<code>na</code>的值也发生了改变。</p>
<h4 id="情况三-关于object的传递">情况三： 关于<code>object</code>的传递</h4>
<pre><code class="language-go">var object Object

func f(object Object){
    ···
}
</code></pre>
<p>如果是这种情况，就要看在定义<code>object</code>时，是把他当作值传递来用还是引用传递来用。</p>
<pre><code class="language-go">// 1.这种情况可以安全的当作值传递来用
type Object struct {
	a *int
}

func f(object Object){
    ...
}

func main(){
	l := 9
	o := Object{&amp;l} // 不管怎么拷贝，拷贝出的 object.a 都是指向原本l的地址，会改变l的值
	f(o)	
}


// 2.如果对象需要例如维护某些状态，仅仅传值是不会改变函数外参数原本的值的，如：st
type Object struct {
	a *int
	st bool // 一个bool值
}
func fo(object Object) { // 传值，一个Object类型的值
	*object.a ++
	object.st = false  // 原本的st不会被改变
}

func main() {
	l := 9
    o := Object{&amp;l, true}
	fo(o)
	fmt.Printf(&quot;%d  &quot;, *o.a) // 10
	fmt.Println(o.st)	// true
}

// 3.如果需要，传指针来实现引用传递的效果，如下面的 st 被修改了
func p_fo(object *Object) {	// 接收一个Object类型的指针
	*object.a++
	object.st = false	// 拷贝后的 object 指向原来的地址，赋值操作实际上改变原值
}

func main() {
	l := 9
	o := Object{&amp;l, true}
	o_p := &amp;o
	p_fo(o_p)
	fmt.Printf(&quot;%d  &quot;, *o.a) // 10
	fmt.Println(o.st) // false
}
</code></pre>
<p>所以，在定义一个<code>Object</code>时，要考虑以后是用值还是用引用，再来定义使其更方便的被使用。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[$ ./network.sh up =>ENTER后发生了什么？]]></title>
        <id>https://lizonglin313.github.io/post/dollar-networksh-up-greaterenter-hou-fa-sheng-liao-shi-me</id>
        <link href="https://lizonglin313.github.io/post/dollar-networksh-up-greaterenter-hou-fa-sheng-liao-shi-me">
        </link>
        <updated>2021-01-24T14:32:13.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Fabric2.X中，用fabric-samples替换掉原来的first-network，提供给开发人员快速上手。fabric-samples中的test-network为我们提供了一系列脚本和配置文件，让我们可以简单的启动一个fabric网络。</p>
<p>本文以广度优先的方法解读network.sh的内容</p>
</blockquote>
<h2 id="networksh">network.sh</h2>
<h4 id="a设置环境变量">a.设置环境变量</h4>
<pre><code class="language-shell">export PATH=${PWD}/../bin:${PWD}:$PATH
export FABRIC_CFG_PATH=${PWD}/configtx
export VERBOSE=false
</code></pre>
<ul>
<li><code>bin</code>目录内容如下</li>
</ul>
<pre><code>├─bin
│      configtxgen
│      configtxlator
│      cryptogen
│      discover
│      fabric-ca-client
│      fabric-ca-server
│      idemixgen
│      orderer
│      peer
</code></pre>
<p><code>cryptogen</code>以及<code>configtxgen</code>这两个重要的工具通过编译生成，用来创建参与网络实体的证书，生成创世区块和通道的配置文件以及组织的锚节点。相应的，<code>bin</code>目录中还有其他需要使用到的工具。</p>
<p><code>configtx</code>中的文件是用来配置网络的，<code>configtxgen</code>这个工具就是依靠<code>configtx</code>中的<code>configtx.yaml</code>文件来定义网络。</p>
<h4 id="b提供函数">b.提供函数</h4>
<ul>
<li><code>clearContainers()</code></li>
</ul>
<p>清除启动、运行网络时，在docker中创建的镜像；这个函数在关闭网络时被调用。</p>
<ul>
<li><code>removeUnwantedImages()</code></li>
</ul>
<p>清除不想要的镜像</p>
<ul>
<li><code>checkPrereqs()</code></li>
</ul>
<p>检查网络组件、二进制文件、镜像文件的版本，依托于上级目录的<code>config</code>文件夹，该文件夹的内容中包含了Fabric网络中的基本属性的配置，其内容如下：</p>
<pre><code class="language-shell">├─config
│      configtx.yaml
│      core.yaml	
│      orderer.yaml
</code></pre>
<p>检查<code>peer</code>版本、<code>docker_image</code>版本。</p>
<blockquote>
<p>一般来说，拉取Fabric项目后，使用<code>bootstrap.sh</code>脚本，都可以得到对应版本的文件以及环境。</p>
</blockquote>
<ul>
<li><code>createOrgs()</code></li>
</ul>
<p>该函数使用<code>cryptogen</code>工具或者<code>CAs</code>创建组织的身份材料，它在运行时首先清理掉现有的身份，然后一步步执行。在<code>test-network</code>中，首先使用<code>cryptogen</code>或者<code>CAs</code>工具创建<code>Org1</code>，<code>Org2</code>的身份，然后创建<code>Orderer Org</code>的身份。</p>
<blockquote>
<p>一旦创建了组织的身份后，我们就需要生成<code>genesis block</code>，并且创建应用的<code>channel</code>让<code>Orderer</code>节点加入。</p>
</blockquote>
<ul>
<li><code>createConsortium()</code></li>
</ul>
<p>该函数使用<code>configtxgen</code>这个工具生成<code>channel</code>的<code>orderer genesis block</code>。</p>
<blockquote>
<p>在创建组织实体身份以及创世区块后，就可以开启<code>peers</code>和<code>orderering</code>服务了。</p>
</blockquote>
<ul>
<li><code>networkUp()</code></li>
</ul>
<p>该函数使用<code>docker compose</code>开启<code>peer</code>和<code>orderer</code>节点。成功后，为我们打印出当前的<code>docker images</code>。</p>
<blockquote>
<p>对于运行的Fabric网络，可以创建<code>channel</code>实现应用数据的隔离。</p>
</blockquote>
<ul>
<li><code>createChannel()</code></li>
</ul>
<p>该函数创建一个<code>channel</code>让<code>Org1</code>和<code>Org2</code>的<code>peers</code>节点加入。首先，它检查网络是否启动，如果没有，就先把网络开启，然后再创建。它使用<code>createChannel.sh</code>脚本创建通道。</p>
<ul>
<li><code>deployCC()</code></li>
</ul>
<p>该函数把链码安装到通道上并将链码实例化，它调用<code>deployCC.sh</code>这个脚本实现。</p>
<ul>
<li><code>networkDown()</code></li>
</ul>
<p>该函数断开正在运行的网络，它首先删除<code>docker compose</code>中的镜像，清除容器，删除<code>genesis block</code>各个组织的<code>ca</code>，卸载<code>chaincode</code>。也就是说，<code>down</code>掉网络后，我们在上面创建的实体、通道，安装的链码等等全部被清除掉了，如果再次启动时还需从头开始配置。</p>
<h2 id="up-down">Up &amp; Down</h2>
<h4 id="networksh-up">./network.sh up</h4>
<p>这个命令其实就是调用函数<code>networkUp()</code>，函数中依次调用：</p>
<ol>
<li><code>createOrgs()</code></li>
<li><code>createConsortium()</code></li>
<li>开启<code>docker-compose</code></li>
<li>打印<code>docker ps -a</code>存在的镜像</li>
</ol>
<h4 id="networksh-down">./network.sh down</h4>
<p>这个命令调用函数<code>networkDown()</code>，函数中依次调用：</p>
<ol>
<li><code>docker-compose -f</code>删除镜像</li>
<li><code>clearContainers()</code></li>
<li><code>removeUnwantedImages</code></li>
<li><code>rm -rf system-genesis-block</code></li>
<li><code>rm -rf organizations/fabric-ca/org...</code></li>
<li><code>rm -rf channel-artifacts log.txt chaincode.tar.gz chaincode</code></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang常用工具]]></title>
        <id>https://lizonglin313.github.io/post/golang-chang-yong-gong-ju</id>
        <link href="https://lizonglin313.github.io/post/golang-chang-yong-gong-ju">
        </link>
        <updated>2021-01-23T11:35:32.000Z</updated>
        <content type="html"><![CDATA[<p>一般格式：<code>go command [arguments]</code></p>
<h3 id="build">build</h3>
<ul>
<li>
<p><code>build</code></p>
<p>最常用的命令，用来编译go文件</p>
<p>跨平台编译，如<code>env GOOS=linux GOARCH=amd64 go build</code>在Linux系统、amd64架构编译</p>
</li>
</ul>
<h3 id="install">install</h3>
<ul>
<li>
<p><code>install</code></p>
<p>同为编译，和<code>build</code>的不同在于编译后会将输出文件打包成库放在pkg下面</p>
</li>
</ul>
<h3 id="get">get</h3>
<ul>
<li>
<p><code>get</code></p>
<p>用于获取go第三方包，默认从git repo获取最新版本，如<code>go get -u github.com/go-sql-driver/mysql</code></p>
</li>
</ul>
<h3 id="fmt">fmt</h3>
<ul>
<li>
<p><code>fmt</code></p>
<p>统一代码风格，<code>go fmt</code></p>
</li>
</ul>
<h3 id="test">test</h3>
<ul>
<li>
<p><code>test</code></p>
<p>运行当前包目录下的test，如<code>go test</code>或<code>go test -v</code>，test文件命名是<code>xxx_test.go</code></p>
</li>
</ul>
<p>关于写test case：</p>
<ul>
<li>
<p>test命名为<code>TestXxxx</code></p>
</li>
<li>
<p>test case 的参数为：<code>t *testing.T</code> 或者 <code>b *testing.B</code> (用于测试性能)</p>
</li>
<li>
<p><code>t.Errorf()</code> 用于打印错误信息，同时跳过整个test case</p>
</li>
<li>
<p><code>t.SkipNow()</code> 为跳过当前test，并且直接处理下一个test case，要写在test case的第一行</p>
</li>
<li>
<p><code>t.Run()</code> 来执行subtests，可以做到控制test输出以及test的顺序</p>
</li>
<li>
<p><code>TestMain(m *testing.M)</code> 初始化test，使用<code>m.Run()</code>来调用其他tests，可以用来完成一些初始化；如果没有调用<code>m.Run()</code>，那么处了TestMain以外其他的tests就不会被执行</p>
</li>
</ul>
<p>关于benchmark：</p>
<ul>
<li>benchmark函数一般以Benchmark开头，如<code>BenchmarkXxx</code></li>
<li>参数为： <code>b *testing.B</code></li>
<li>每次执行一般会跑<code>b.N</code>次</li>
<li>在执行过程中根据实际case的执行时间是否稳定来调整<code>b.N</code>的次数直至稳定</li>
<li>命令行中，命令为：<code>go test -bench=.</code></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fabric2.X_fabric-samples_test-network解读]]></title>
        <id>https://lizonglin313.github.io/post/fabric2x_fabric-samples_test-network-jie-du</id>
        <link href="https://lizonglin313.github.io/post/fabric2x_fabric-samples_test-network-jie-du">
        </link>
        <updated>2021-01-21T12:41:47.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Fabric2.X中，<code>fabric-samples</code>将作为Fabric1.X中的<code>first-network</code>的替代。也就是说，在2.X版本及以后，使用<code>fabric-samples</code>作为fabric的测试网络了。</p>
</blockquote>
<p>在配置好基本环境之后，来看一下它为我们提供了哪些内容。</p>
<h2 id="目录结构">目录结构</h2>
<pre><code class="language-shell">root@lizonglin-virtual-machine:/home/lizonglin/GoWork/src/github.com/fabric/scripts/fabric-samples# ll
total 100
drwxr-xr-x 15 lizonglin lizonglin  4096 1月  21 10:55 ./
drwxr-xr-x  3 lizonglin lizonglin  4096 1月  21 10:17 ../
drwxr-xr-x  2 lizonglin lizonglin  4096 10月  1 03:52 bin/
drwxr-xr-x  8 lizonglin lizonglin  4096 1月  21 10:55 chaincode/
drwxr-xr-x  3 lizonglin lizonglin  4096 1月  21 10:55 chaincode-docker-devmode/
drwxr-xr-x  4 lizonglin lizonglin  4096 1月  21 10:55 ci/
-rw-r--r--  1 lizonglin lizonglin   597 1月  17 18:50 CODE_OF_CONDUCT.md
-rw-r--r--  1 lizonglin lizonglin   109 1月  17 18:50 CODEOWNERS
drwxr-xr-x  3 lizonglin lizonglin  4096 1月  21 10:55 commercial-paper/
drwxr-xr-x  2 lizonglin lizonglin  4096 10月  1 02:41 config/
-rw-r--r--  1 lizonglin lizonglin   935 1月  17 18:50 CONTRIBUTING.md
drwxr-xr-x  5 lizonglin lizonglin  4096 1月  21 10:55 fabcar/
drwxr-xr-x  6 lizonglin lizonglin  4096 1月  21 11:24 first-network/
drwxr-xr-x  8 lizonglin lizonglin  4096 1月  21 10:55 .git/
-rw-r--r--  1 lizonglin lizonglin   189 1月  21 10:55 .gitignore
drwxr-xr-x  4 lizonglin lizonglin  4096 1月  21 10:55 high-throughput/
drwxr-xr-x  4 lizonglin lizonglin  4096 1月  21 10:55 interest_rate_swaps/
-rw-r--r--  1 lizonglin lizonglin 11358 1月  17 18:50 LICENSE
-rw-r--r--  1 lizonglin lizonglin  1644 1月  21 10:55 MAINTAINERS.md
drwxr-xr-x  2 lizonglin lizonglin  4096 1月  21 10:55 off_chain_data/
-rw-r--r--  1 lizonglin lizonglin  1694 1月  21 10:55 README.md
-rw-r--r--  1 lizonglin lizonglin  1035 1月  17 18:50 SECURITY.md
drwxr-xr-x  8 lizonglin lizonglin  4096 1月  21 18:52 test-network/
</code></pre>
<p>fabric-samples的目录结构如下，可以看到还是暂时为我们保留了first-network，但是新版的启动网络脚本则是在test-network中。</p>
<pre><code class="language-shell">root@lizonglin-virtual-machine:/home/lizonglin/GoWork/src/github.com/fabric/scripts/fabric-samples/test-network# ll
total 68
drwxr-xr-x  8 lizonglin lizonglin  4096 1月  21 18:52 ./
drwxr-xr-x 15 lizonglin lizonglin  4096 1月  21 10:55 ../
drwxr-xr-x  4 lizonglin lizonglin  4096 1月  21 10:55 addOrg3/
drwxr-xr-x  2 lizonglin lizonglin  4096 1月  21 10:55 configtx/
drwxr-xr-x  2 lizonglin lizonglin  4096 1月  21 10:55 docker/
-rw-r--r--  1 lizonglin lizonglin    69 1月  17 18:50 .env
-rw-r--r--  1 lizonglin lizonglin   349 1月  21 10:55 .gitignore
-rwxr-xr-x  1 lizonglin lizonglin 20570 1月  21 10:55 network.sh*
drwxr-xr-x  4 lizonglin lizonglin  4096 1月  21 20:05 organizations/
-rw-r--r--  1 lizonglin lizonglin   788 1月  21 10:55 README.md
drwxr-xr-x  3 lizonglin lizonglin  4096 1月  21 10:55 scripts/
drwxr-xr-x  2 lizonglin lizonglin  4096 1月  21 20:05 system-genesis-block/
</code></pre>
<h2 id="networksh">network.sh</h2>
<p>其中，network.sh*即启动脚本，在新的脚本中，为我们进行了大量的配置工作，使得新版本的脚本很长，省略一些不必要的内容：</p>
<pre><code class="language-shell">#!/bin/bash
# 首先是一些说明：
# 两个组织，每个组织一个peer节点
# 一个使用Raft单节点的排序服务
# This script brings up a Hyperledger Fabric network for testing smart contracts
# and applications. The test network consists of two organizations with one
# peer each, and a single node Raft ordering service. Users can also use this
# script to create a channel deploy a chaincode on the channel
#
# prepending $PWD/../bin to PATH to ensure we are picking up the correct binaries
# this may be commented out to resolve installed version of tools if desired
export PATH=${PWD}/../bin:${PWD}:$PATH
export FABRIC_CFG_PATH=${PWD}/configtx
export VERBOSE=false

# Print the usage message
function printHelp() {
  echo &quot;Usage: &quot;
  echo &quot;  network.sh &lt;Mode&gt; [Flags]&quot;
  echo &quot;    &lt;Mode&gt;&quot;
  echo &quot;      - 'up' - bring up fabric orderer and peer nodes. No channel is created&quot;
  echo &quot;      - 'up createChannel' - bring up fabric network with one channel&quot;
  echo &quot;      - 'createChannel' - create and join a channel after the network is created&quot;
  echo &quot;      - 'deployCC' - deploy the fabcar chaincode on the channel&quot;
  echo &quot;      - 'down' - clear the network with docker-compose down&quot;
  echo &quot;      - 'restart' - restart the network&quot;
  echo
  echo &quot;    Flags:&quot;
  echo &quot;    -ca &lt;use CAs&gt; -  create Certificate Authorities to generate the crypto material&quot;
  echo &quot;    -c &lt;channel name&gt; - channel name to use (defaults to \&quot;mychannel\&quot;)&quot;
  echo &quot;    -s &lt;dbtype&gt; - the database backend to use: goleveldb (default) or couchdb&quot;
  echo &quot;    -r &lt;max retry&gt; - CLI times out after certain number of attempts (defaults to 5)&quot;
  echo &quot;    -d &lt;delay&gt; - delay duration in seconds (defaults to 3)&quot;
  echo &quot;    -l &lt;language&gt; - the programming language of the chaincode to deploy: go (default), java, javascript, typescript&quot;
  echo &quot;    -v &lt;version&gt;  - chaincode version. Must be a round number, 1, 2, 3, etc&quot;
  echo &quot;    -i &lt;imagetag&gt; - the tag to be used to launch the network (defaults to \&quot;latest\&quot;)&quot;
  echo &quot;    -verbose - verbose mode&quot;
  echo &quot;  network.sh -h (print this message)&quot;
  echo
  echo &quot; Possible Mode and flags&quot;
  echo &quot;  network.sh up -ca -c -r -d -s -i -verbose&quot;
  echo &quot;  network.sh up createChannel -ca -c -r -d -s -i -verbose&quot;
  echo &quot;  network.sh createChannel -c -r -d -verbose&quot;
  echo &quot;  network.sh deployCC -l -v -r -d -verbose&quot;
  echo
  echo &quot; Taking all defaults:&quot;
  echo &quot;	network.sh up&quot;
  echo
  echo &quot; Examples:&quot;
  echo &quot;  network.sh up createChannel -ca -c mychannel -s couchdb -i 2.0.0&quot;
  echo &quot;  network.sh createChannel -c channelName&quot;
  echo &quot;  network.sh deployCC -l javascript&quot;
}
# 清理docker容器
# Obtain CONTAINER_IDS and remove them
# TODO Might want to make this optional - could clear other containers
# This function is called when you bring a network down
function clearContainers() {
  CONTAINER_IDS=$(docker ps -a | awk '($2 ~ /dev-peer.*/) {print $1}')
  if [ -z &quot;$CONTAINER_IDS&quot; -o &quot;$CONTAINER_IDS&quot; == &quot; &quot; ]; then
    echo &quot;---- No containers available for deletion ----&quot;
  else
    docker rm -f $CONTAINER_IDS
  fi
}
# 删除docker镜像
# Delete any images that were generated as a part of this setup
# specifically the following images are often left behind:
# This function is called when you bring the network down
function removeUnwantedImages() {
  DOCKER_IMAGE_IDS=$(docker images | awk '($1 ~ /dev-peer.*/) {print $3}')
  if [ -z &quot;$DOCKER_IMAGE_IDS&quot; -o &quot;$DOCKER_IMAGE_IDS&quot; == &quot; &quot; ]; then
    echo &quot;---- No images available for deletion ----&quot;
  else
    docker rmi -f $DOCKER_IMAGE_IDS
  fi
}

# Versions of fabric known not to work with the test network
BLACKLISTED_VERSIONS=&quot;^1\.0\. ^1\.1\. ^1\.2\. ^1\.3\. ^1\.4\.&quot;

# 这里检查一下现有的二进制文件以及镜像是否可用，免得后续出现问题
# Do some basic sanity checking to make sure that the appropriate versions of fabric
# binaries/images are available. In the future, additional checking for the presence
# of go or other items could be added.
function checkPrereqs() {
  ## Check if your have cloned the peer binaries and configuration files.
  peer version &gt; /dev/null 2&gt;&amp;1

  if [[ $? -ne 0 || ! -d &quot;../config&quot; ]]; then
    echo &quot;ERROR! Peer binary and configuration files not found..&quot;
    echo
    echo &quot;Follow the instructions in the Fabric docs to install the Fabric Binaries:&quot;
    echo &quot;https://hyperledger-fabric.readthedocs.io/en/latest/install.html&quot;
    exit 1
  fi
  # 检查docker镜像以及二进制文件是否匹配
  # use the fabric tools container to see if the samples and binaries match your
  # docker images
  LOCAL_VERSION=$(peer version | sed -ne 's/ Version: //p')
  DOCKER_IMAGE_VERSION=$(docker run --rm hyperledger/fabric-tools:$IMAGETAG peer version | sed -ne 's/ Version: //p' | head -1)

  echo &quot;LOCAL_VERSION=$LOCAL_VERSION&quot;
  echo &quot;DOCKER_IMAGE_VERSION=$DOCKER_IMAGE_VERSION&quot;

  if [ &quot;$LOCAL_VERSION&quot; != &quot;$DOCKER_IMAGE_VERSION&quot; ]; then
    echo &quot;=================== WARNING ===================&quot;
    echo &quot;  Local fabric binaries and docker images are  &quot;
    echo &quot;  out of  sync. This may cause problems.       &quot;
    echo &quot;===============================================&quot;
  fi

  for UNSUPPORTED_VERSION in $BLACKLISTED_VERSIONS; do
    echo &quot;$LOCAL_VERSION&quot; | grep -q $UNSUPPORTED_VERSION
    if [ $? -eq 0 ]; then
      echo &quot;ERROR! Local Fabric binary version of $LOCAL_VERSION does not match the versions supported by the test network.&quot;
      exit 1
    fi

    echo &quot;$DOCKER_IMAGE_VERSION&quot; | grep -q $UNSUPPORTED_VERSION
    if [ $? -eq 0 ]; then
      echo &quot;ERROR! Fabric Docker image version of $DOCKER_IMAGE_VERSION does not match the versions supported by the test network.&quot;
      exit 1
    fi
  done
}

# 下面简单介绍了cryptogen这个工具以及CA
# Before you can bring up a network, each organization needs to generate the crypto
# material that will define that organization on the network. Because Hyperledger
# Fabric is a permissioned blockchain, each node and user on the network needs to
# use certificates and keys to sign and verify its actions. In addition, each user
# needs to belong to an organization that is recognized as a member of the network.
# You can use the Cryptogen tool or Fabric CAs to generate the organization crypto
# material.

# By default, the sample network uses cryptogen. Cryptogen is a tool that is
# meant for development and testing that can quicky create the certificates and keys
# that can be consumed by a Fabric network. The cryptogen tool consumes a series
# of configuration files for each organization in the &quot;organizations/cryptogen&quot;
# directory. Cryptogen uses the files to generate the crypto  material for each
# org in the &quot;organizations&quot; directory.

# You can also Fabric CAs to generate the crypto material. CAs sign the certificates
# and keys that they generate to create a valid root of trust for each organization.
# The script uses Docker Compose to bring up three CAs, one for each peer organization
# and the ordering organization. The configuration file for creating the Fabric CA
# servers are in the &quot;organizations/fabric-ca&quot; directory. Within the same diectory,
# the &quot;registerEnroll.sh&quot; script uses the Fabric CA client to create the identites,
# certificates, and MSP folders that are needed to create the test network in the
# &quot;organizations/ordererOrganizations&quot; directory.

# Create Organziation crypto material using cryptogen or CAs
function createOrgs() {

  if [ -d &quot;organizations/peerOrganizations&quot; ]; then
    rm -Rf organizations/peerOrganizations &amp;&amp; rm -Rf organizations/ordererOrganizations
  fi

  # Create crypto material using cryptogen
  if [ &quot;$CRYPTO&quot; == &quot;cryptogen&quot; ]; then
    which cryptogen
    if [ &quot;$?&quot; -ne 0 ]; then
      echo &quot;cryptogen tool not found. exiting&quot;
      exit 1
    fi
    echo
    echo &quot;##########################################################&quot;
    echo &quot;##### Generate certificates using cryptogen tool #########&quot;
    echo &quot;##########################################################&quot;
    echo

    echo &quot;##########################################################&quot;
    echo &quot;############ Create Org1 Identities ######################&quot;
    echo &quot;##########################################################&quot;

    set -x
    cryptogen generate --config=./organizations/cryptogen/crypto-config-org1.yaml --output=&quot;organizations&quot;
    res=$?
    set +x
    if [ $res -ne 0 ]; then
      echo &quot;Failed to generate certificates...&quot;
      exit 1
    fi

    echo &quot;##########################################################&quot;
    echo &quot;############ Create Org2 Identities ######################&quot;
    echo &quot;##########################################################&quot;

    set -x
    cryptogen generate --config=./organizations/cryptogen/crypto-config-org2.yaml --output=&quot;organizations&quot;
    res=$?
    set +x
    if [ $res -ne 0 ]; then
      echo &quot;Failed to generate certificates...&quot;
      exit 1
    fi

    echo &quot;##########################################################&quot;
    echo &quot;############ Create Orderer Org Identities ###############&quot;
    echo &quot;##########################################################&quot;

    set -x
    cryptogen generate --config=./organizations/cryptogen/crypto-config-orderer.yaml --output=&quot;organizations&quot;
    res=$?
    set +x
    if [ $res -ne 0 ]; then
      echo &quot;Failed to generate certificates...&quot;
      exit 1
    fi

  fi

  # Create crypto material using Fabric CAs
  if [ &quot;$CRYPTO&quot; == &quot;Certificate Authorities&quot; ]; then

    fabric-ca-client version &gt; /dev/null 2&gt;&amp;1
    if [ $? -ne 0 ]; then
      echo &quot;Fabric CA client not found locally, downloading...&quot;
      cd ..
      curl -s -L &quot;https://github.com/hyperledger/fabric-ca/releases/download/v1.4.4/hyperledger-fabric-ca-${OS_ARCH}-1.4.4.tar.gz&quot; | tar xz || rc=$?
    if [ -n &quot;$rc&quot; ]; then
        echo &quot;==&gt; There was an error downloading the binary file.&quot;
        echo &quot;fabric-ca-client binary is not available to download&quot;
    else
        echo &quot;==&gt; Done.&quot;
      cd test-network
    fi
    fi

    echo
    echo &quot;##########################################################&quot;
    echo &quot;##### Generate certificates using Fabric CA's ############&quot;
    echo &quot;##########################################################&quot;

    IMAGE_TAG=$IMAGETAG docker-compose -f $COMPOSE_FILE_CA up -d 2&gt;&amp;1

    . organizations/fabric-ca/registerEnroll.sh

    sleep 10

    echo &quot;##########################################################&quot;
    echo &quot;############ Create Org1 Identities ######################&quot;
    echo &quot;##########################################################&quot;

    createOrg1

    echo &quot;##########################################################&quot;
    echo &quot;############ Create Org2 Identities ######################&quot;
    echo &quot;##########################################################&quot;

    createOrg2

    echo &quot;##########################################################&quot;
    echo &quot;############ Create Orderer Org Identities ###############&quot;
    echo &quot;##########################################################&quot;

    createOrderer

  fi

  echo
  echo &quot;Generate CCP files for Org1 and Org2&quot;
  ./organizations/ccp-generate.sh
}

# 使用cryptogen（cryptogen用于配置网络中的证书、组织等）配置完网络组织后
# 这里使用configtxgen配置创世区块、channel以及锚节点
# 有一个&quot;configtx.yaml&quot;文件帮助配置网络中的组织创世区块，组织成员等内容
# 创建每个channel的MSP
# Once you create the organization crypto material, you need to create the
# genesis block of the orderer system channel. This block is required to bring
# up any orderer nodes and create any application channels.

# The configtxgen tool is used to create the genesis block. Configtxgen consumes a
# &quot;configtx.yaml&quot; file that contains the definitions for the sample network. The
# genesis block is defiend using the &quot;TwoOrgsOrdererGenesis&quot; profile at the bottom
# of the file. This profile defines a sample consortium, &quot;SampleConsortium&quot;,
# consisting of our two Peer Orgs. This consortium defines which organizations are
# recognized as members of the network. The peer and ordering organizations are defined
# in the &quot;Profiles&quot; section at the top of the file. As part of each organization
# profile, the file points to a the location of the MSP directory for each member.
# This MSP is used to create the channel MSP that defines the root of trust for
# each organization. In essense, the channel MSP allows the nodes and users to be
# recognized as network members. The file also specifies the anchor peers for each
# peer org. In future steps, this same file is used to create the channel creation
# transaction and the anchor peer updates.
#
#
# If you receive the following warning, it can be safely ignored:
#
# [bccsp] GetDefault -&gt; WARN 001 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP.
#
# You can ignore the logs regarding intermediate certs, we are not using them in
# this crypto implementation.

# Generate orderer system channel genesis block.
function createConsortium() {

  which configtxgen
  if [ &quot;$?&quot; -ne 0 ]; then
    echo &quot;configtxgen tool not found. exiting&quot;
    exit 1
  fi

  echo &quot;#########  Generating Orderer Genesis block ##############&quot;

  # Note: For some unknown reason (at least for now) the block file can't be
  # named orderer.genesis.block or the orderer will fail to launch!
  set -x
  configtxgen -profile TwoOrgsOrdererGenesis -channelID system-channel -outputBlock ./system-genesis-block/genesis.block
  res=$?
  set +x
  if [ $res -ne 0 ]; then
    echo &quot;Failed to generate orderer genesis block...&quot;
    exit 1
  fi
}

# 之后，启动peer节点和排序服务，创建相应的docker实体
# After we create the org crypto material and the system channel genesis block,
# we can now bring up the peers and orderering service. By default, the base
# file for creating the network is &quot;docker-compose-test-net.yaml&quot; in the ``docker``
# folder. This file defines the environment variables and file mounts that
# point the crypto material and genesis block that were created in earlier.

# Bring up the peer and orderer nodes using docker compose.
function networkUp() {

  checkPrereqs
  # generate artifacts if they don't exist
  if [ ! -d &quot;organizations/peerOrganizations&quot; ]; then
    createOrgs
    createConsortium
  fi

  COMPOSE_FILES=&quot;-f ${COMPOSE_FILE_BASE}&quot;

  if [ &quot;${DATABASE}&quot; == &quot;couchdb&quot; ]; then
    COMPOSE_FILES=&quot;${COMPOSE_FILES} -f ${COMPOSE_FILE_COUCH}&quot;
  fi

  IMAGE_TAG=$IMAGETAG docker-compose ${COMPOSE_FILES} up -d 2&gt;&amp;1

  docker ps -a
  if [ $? -ne 0 ]; then
    echo &quot;ERROR !!!! Unable to start network&quot;
    exit 1
  fi
}

# 将peer加入通道
## call the script to join create the channel and join the peers of org1 and org2
function createChannel() {

## Bring up the network if it is not arleady up.

  if [ ! -d &quot;organizations/peerOrganizations&quot; ]; then
    echo &quot;Bringing up network&quot;
    networkUp
  fi

  # now run the script that creates a channel. This script uses configtxgen once
  # more to create the channel creation transaction and the anchor peer updates.
  # configtx.yaml is mounted in the cli container, which allows us to use it to
  # create the channel artifacts
 scripts/createChannel.sh $CHANNEL_NAME $CLI_DELAY $MAX_RETRY $VERBOSE
  if [ $? -ne 0 ]; then
    echo &quot;Error !!! Create channel failed&quot;
    exit 1
  fi

}
# 实例化链码
## Call the script to isntall and instantiate a chaincode on the channel
function deployCC() {

  scripts/deployCC.sh $CHANNEL_NAME $CC_SRC_LANGUAGE $VERSION $CLI_DELAY $MAX_RETRY $VERBOSE

  if [ $? -ne 0 ]; then
    echo &quot;ERROR !!! Deploying chaincode failed&quot;
    exit 1
  fi

  exit 0
}

# 关闭网络
# Tear down running network
function networkDown() {
  # stop org3 containers also in addition to org1 and org2, in case we were running sample to add org3
  docker-compose -f $COMPOSE_FILE_BASE -f $COMPOSE_FILE_COUCH -f $COMPOSE_FILE_CA down --volumes --remove-orphans
  docker-compose -f $COMPOSE_FILE_COUCH_ORG3 -f $COMPOSE_FILE_ORG3 down --volumes --remove-orphans
  # Don't remove the generated artifacts -- note, the ledgers are always removed
  if [ &quot;$MODE&quot; != &quot;restart&quot; ]; then
    # Bring down the network, deleting the volumes
    #Cleanup the chaincode containers
    clearContainers
    #Cleanup images
    removeUnwantedImages
    # remove orderer block and other channel configuration transactions and certs
    rm -rf system-genesis-block/*.block organizations/peerOrganizations organizations/ordererOrganizations
    ## remove fabric ca artifacts
    rm -rf organizations/fabric-ca/org1/msp organizations/fabric-ca/org1/tls-cert.pem organizations/fabric-ca/org1/ca-cert.pem organizations/fabric-ca/org1/IssuerPublicKey organizations/fabric-ca/org1/IssuerRevocationPublicKey organizations/fabric-ca/org1/fabric-ca-server.db
    rm -rf organizations/fabric-ca/org2/msp organizations/fabric-ca/org2/tls-cert.pem organizations/fabric-ca/org2/ca-cert.pem organizations/fabric-ca/org2/IssuerPublicKey organizations/fabric-ca/org2/IssuerRevocationPublicKey organizations/fabric-ca/org2/fabric-ca-server.db
    rm -rf organizations/fabric-ca/ordererOrg/msp organizations/fabric-ca/ordererOrg/tls-cert.pem organizations/fabric-ca/ordererOrg/ca-cert.pem organizations/fabric-ca/ordererOrg/IssuerPublicKey organizations/fabric-ca/ordererOrg/IssuerRevocationPublicKey organizations/fabric-ca/ordererOrg/fabric-ca-server.db
    rm -rf addOrg3/fabric-ca/org3/msp addOrg3/fabric-ca/org3/tls-cert.pem addOrg3/fabric-ca/org3/ca-cert.pem addOrg3/fabric-ca/org3/IssuerPublicKey addOrg3/fabric-ca/org3/IssuerRevocationPublicKey addOrg3/fabric-ca/org3/fabric-ca-server.db


    # remove channel and script artifacts
    rm -rf channel-artifacts log.txt fabcar.tar.gz fabcar

  fi
}

# Obtain the OS and Architecture string that will be used to select the correct
# native binaries for your platform, e.g., darwin-amd64 or linux-amd64
OS_ARCH=$(echo &quot;$(uname -s | tr '[:upper:]' '[:lower:]' | sed 's/mingw64_nt.*/windows/')-$(uname -m | sed 's/x86_64/amd64/g')&quot; | awk '{print tolower($0)}')
# Using crpto vs CA. default is cryptogen
CRYPTO=&quot;cryptogen&quot;
# timeout duration - the duration the CLI should wait for a response from
# another container before giving up
MAX_RETRY=5
# default for delay between commands
CLI_DELAY=3
# channel name defaults to &quot;mychannel&quot;
CHANNEL_NAME=&quot;mychannel&quot;
# use this as the default docker-compose yaml definition
COMPOSE_FILE_BASE=docker/docker-compose-test-net.yaml
# docker-compose.yaml file if you are using couchdb
COMPOSE_FILE_COUCH=docker/docker-compose-couch.yaml
# certificate authorities compose file
COMPOSE_FILE_CA=docker/docker-compose-ca.yaml
# use this as the docker compose couch file for org3
COMPOSE_FILE_COUCH_ORG3=addOrg3/docker/docker-compose-couch-org3.yaml
# use this as the default docker-compose yaml definition for org3
COMPOSE_FILE_ORG3=addOrg3/docker/docker-compose-org3.yaml
#
# use golang as the default language for chaincode
CC_SRC_LANGUAGE=golang
# Chaincode version
VERSION=1
# default image tag
IMAGETAG=&quot;latest&quot;
# default database
DATABASE=&quot;leveldb&quot;

# Parse commandline args

## Parse mode
if [[ $# -lt 1 ]] ; then
  printHelp
  exit 0
else
  MODE=$1
  shift
fi

# parse a createChannel subcommand if used
if [[ $# -ge 1 ]] ; then
  key=&quot;$1&quot;
  if [[ &quot;$key&quot; == &quot;createChannel&quot; ]]; then
      export MODE=&quot;createChannel&quot;
      shift
  fi
fi

# parse flags

while [[ $# -ge 1 ]] ; do
  key=&quot;$1&quot;
  case $key in
  -h )
    printHelp
    exit 0
    ;;
  -c )
    CHANNEL_NAME=&quot;$2&quot;
    shift
    ;;
  -ca )
    CRYPTO=&quot;Certificate Authorities&quot;
    ;;
  -r )
    MAX_RETRY=&quot;$2&quot;
    shift
    ;;
  -d )
    CLI_DELAY=&quot;$2&quot;
    shift
    ;;
  -s )
    DATABASE=&quot;$2&quot;
    shift
    ;;
  -l )
    CC_SRC_LANGUAGE=&quot;$2&quot;
    shift
    ;;
  -v )
    VERSION=&quot;$2&quot;
    shift
    ;;
  -i )
    IMAGETAG=&quot;$2&quot;
    shift
    ;;
  -verbose )
    VERBOSE=true
    shift
    ;;
  * )
    echo
    echo &quot;Unknown flag: $key&quot;
    echo
    printHelp
    exit 1
    ;;
  esac
  shift
done

# Are we generating crypto material with this command?
if [ ! -d &quot;organizations/peerOrganizations&quot; ]; then
  CRYPTO_MODE=&quot;with crypto from '${CRYPTO}'&quot;
else
  CRYPTO_MODE=&quot;&quot;
fi

# Determine mode of operation and printing out what we asked for
if [ &quot;$MODE&quot; == &quot;up&quot; ]; then
  echo &quot;Starting nodes with CLI timeout of '${MAX_RETRY}' tries and CLI delay of '${CLI_DELAY}' seconds and using database '${DATABASE}' ${CRYPTO_MODE}&quot;
  echo
elif [ &quot;$MODE&quot; == &quot;createChannel&quot; ]; then
  echo &quot;Creating channel '${CHANNEL_NAME}'.&quot;
  echo
  echo &quot;If network is not up, starting nodes with CLI timeout of '${MAX_RETRY}' tries and CLI delay of '${CLI_DELAY}' seconds and using database '${DATABASE} ${CRYPTO_MODE}&quot;
  echo
elif [ &quot;$MODE&quot; == &quot;down&quot; ]; then
  echo &quot;Stopping network&quot;
  echo
elif [ &quot;$MODE&quot; == &quot;restart&quot; ]; then
  echo &quot;Restarting network&quot;
  echo
elif [ &quot;$MODE&quot; == &quot;deployCC&quot; ]; then
  echo &quot;deploying chaincode on channel '${CHANNEL_NAME}'&quot;
  echo
else
  printHelp
  exit 1
fi

if [ &quot;${MODE}&quot; == &quot;up&quot; ]; then
  networkUp
elif [ &quot;${MODE}&quot; == &quot;createChannel&quot; ]; then
  createChannel
elif [ &quot;${MODE}&quot; == &quot;deployCC&quot; ]; then
  deployCC
elif [ &quot;${MODE}&quot; == &quot;down&quot; ]; then
  networkDown
elif [ &quot;${MODE}&quot; == &quot;restart&quot; ]; then
  networkDown
  networkUp
else
  printHelp
  exit 1
fi

</code></pre>
<h2 id="启动test-network">启动test-network</h2>
<pre><code class="language-shell">root@lizonglin-virtual-machine:/home/lizonglin/GoWork/src/github.com/fabric/scripts/fabric-samples/test-network# ./network.sh up
# 可以看到，默认使用leveldb
Starting nodes with CLI timeout of '5' tries and CLI delay of '3' seconds and using database 'leveldb' with crypto from 'cryptogen'

LOCAL_VERSION=2.2.1
DOCKER_IMAGE_VERSION=2.2.1
/home/lizonglin/GoWork/src/github.com/fabric/scripts/fabric-samples/test-network/../bin/cryptogen

# 首先使用cryptogen创建证书
##########################################################
##### Generate certificates using cryptogen tool #########
##########################################################

# 组织1
##########################################################
############ Create Org1 Identities ######################
##########################################################
+ cryptogen generate --config=./organizations/cryptogen/crypto-config-org1.yaml --output=organizations
org1.example.com
+ res=0
+ set +x
# 组织2
##########################################################
############ Create Org2 Identities ######################
##########################################################
+ cryptogen generate --config=./organizations/cryptogen/crypto-config-org2.yaml --output=organizations
org2.example.com
+ res=0
+ set +x
# 排序服务
##########################################################
############ Create Orderer Org Identities ###############
##########################################################
+ cryptogen generate --config=./organizations/cryptogen/crypto-config-orderer.yaml --output=organizations
+ res=0
+ set +x

Generate CCP files for Org1 and Org2
/home/lizonglin/GoWork/src/github.com/fabric/scripts/fabric-samples/test-network/../bin/configtxgen
# 排序节点的创世区块
#########  Generating Orderer Genesis block ##############
+ configtxgen -profile TwoOrgsOrdererGenesis -channelID system-channel -outputBlock ./system-genesis-block/genesis.block
2021-01-21 18:53:34.963 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration
2021-01-21 18:53:35.017 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 002 orderer type: etcdraft
2021-01-21 18:53:35.017 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 Orderer.EtcdRaft.Options unset, setting to tick_interval:&quot;500ms&quot; election_tick:10 heartbeat_tick:1 max_inflight_blocks:5 snapshot_interval_size:16777216 
2021-01-21 18:53:35.017 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 004 Loaded configuration: /home/lizonglin/GoWork/src/github.com/fabric/scripts/fabric-samples/test-network/configtx/configtx.yaml
2021-01-21 18:53:35.019 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 005 Generating genesis block
2021-01-21 18:53:35.020 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 006 Writing genesis block
+ res=0
+ set +x
Creating network &quot;net_test&quot; with the default driver
Creating volume &quot;net_orderer.example.com&quot; with default driver
Creating volume &quot;net_peer0.org1.example.com&quot; with default driver
Creating volume &quot;net_peer0.org2.example.com&quot; with default driver
Creating peer0.org2.example.com ... done
Creating orderer.example.com    ... done
Creating peer0.org1.example.com ... done
# 现在的docker中包含的容器，test-network到这里就是初步启动成功了
CONTAINER ID   IMAGE                               COMMAND             CREATED          STATUS                  PORTS                              NAMES
ae8899485a40   hyperledger/fabric-peer:latest      &quot;peer node start&quot;   18 seconds ago   Up Less than a second   0.0.0.0:7051-&gt;7051/tcp             peer0.org1.example.com
e8e4acee2cdd   hyperledger/fabric-orderer:latest   &quot;orderer&quot;           18 seconds ago   Up Less than a second   0.0.0.0:7050-&gt;7050/tcp             orderer.example.com
c0c720b03c4a   hyperledger/fabric-peer:latest      &quot;peer node start&quot;   18 seconds ago   Up 1 second             7051/tcp, 0.0.0.0:9051-&gt;9051/tcp   peer0.org2.example.com

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VMware使用宿主机的小飞机]]></title>
        <id>https://lizonglin313.github.io/post/vmware-shi-yong-su-zhu-ji-de-xiao-fei-ji</id>
        <link href="https://lizonglin313.github.io/post/vmware-shi-yong-su-zhu-ji-de-xiao-fei-ji">
        </link>
        <updated>2021-01-17T11:13:49.000Z</updated>
        <content type="html"><![CDATA[<p>首先，在小飞机客户端设置允许本地代理允许来自局域网的连接</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/01/17/lyS2NionqGdw6Hc.png" alt="image.png" loading="lazy"></figure>
<p>然后，设置VMware的网络适配器的网络连接为桥接模式，复制连接物理网络状态，设置Ubuntu的网络，所有代理和主机都设置为宿主机的IP（如果宿主机为无线连接到网络就是WLAN的IPv4），注意端口号</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/01/17/fvbXAFNuGBZSx3i.png" alt="image.png" loading="lazy"></figure>
<p>最后，设置Ubuntu的IP地址、网关、DNS信息，与宿主机在同一局域网</p>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/01/17/y51ZmLcb3i7hsS2.png" alt="image.png" loading="lazy"></figure>
<p>Apply</p>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2021/01/17/6t4dfXCBHNG29RK.png" alt="image.png" loading="lazy"></figure>
<blockquote>
<p>转载自：<a href="https://bbs.huaweicloud.com/blogs/107105">VMware下ubuntu通过主机Shadowsocks上外网VMware下ubuntu通过主机Shadowsocks上外网-云社区-华为云 (huaweicloud.com)</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git使用]]></title>
        <id>https://lizonglin313.github.io/post/git-shi-yong</id>
        <link href="https://lizonglin313.github.io/post/git-shi-yong">
        </link>
        <updated>2021-01-15T15:14:56.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>有关git使用中的学习记录</p>
</blockquote>
<h2 id="clone速度太慢">clone速度太慢</h2>
<h3 id="方法一">方法一</h3>
<ul>
<li>调整http提交缓存(亲测有效，使用https方式clone)</li>
</ul>
<pre><code class="language-bash">$ git config --global http.postBuffer 524288000
</code></pre>
<p>调整前：</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/01/15/giAKeOhscXGqUrN.png" alt="LA0@_`KKOXC5IKFKPJ_~PRX.png" loading="lazy"></figure>
<p>调整后：</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/01/15/hlJu5ioR4yxzrvg.png" alt="5DU1LP__L__P_K482P_C83O.png" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[bitcoin白皮书]]></title>
        <id>https://lizonglin313.github.io/post/bitcoin-bai-pi-shu</id>
        <link href="https://lizonglin313.github.io/post/bitcoin-bai-pi-shu">
        </link>
        <updated>2021-01-11T14:24:37.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/01/11/1rlwnCBMFfhPkWc.png" alt="PDF_bitcoin.png" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/01/11/bHuZ8NMJ9ky6LUc.png" alt="PDF_bitcoin _1_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/01/11/HmAtd5nSkf41xLW.png" alt="PDF_bitcoin _2_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2021/01/11/ev3NgUGXMCVcFu4.png" alt="PDF_bitcoin _3_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://i.loli.net/2021/01/11/SJKFUqMmpHgZ39V.png" alt="PDF_bitcoin _4_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://i.loli.net/2021/01/11/nmIukExlrbX9A27.png" alt="PDF_bitcoin _5_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://i.loli.net/2021/01/11/rjxJMP2Lqfsi5V3.png" alt="PDF_bitcoin _6_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://i.loli.net/2021/01/11/3za9oj81VDqJpKG.png" alt="PDF_bitcoin _7_.png" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://i.loli.net/2021/01/11/ODUPIMNfsyEkahq.png" alt="PDF_bitcoin _8_.png" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在二叉树中使用递归解决问题]]></title>
        <id>https://lizonglin313.github.io/post/zai-er-cha-shu-zhong-shi-yong-di-gui-jie-jue-wen-ti</id>
        <link href="https://lizonglin313.github.io/post/zai-er-cha-shu-zhong-shi-yong-di-gui-jie-jue-wen-ti">
        </link>
        <updated>2020-06-08T10:05:43.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>整理自leetcode</p>
<p>树结点定义如下：</p>
<pre><code class="language-c">Definition for a binary tree node.
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};
</code></pre>
</blockquote>
<h2 id="二叉树的最大深度">二叉树的最大深度</h2>
<p>给定一个二叉树，找出其最大深度。</p>
<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>
<p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p>
<p><strong>示例：</strong><br>
给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>
<pre><code>    3
   / \
  9  20
    /  \
   15   7
</code></pre>
<p>返回它的最大深度 3 。</p>
<p><strong>代码</strong>:</p>
<pre><code class="language-c">int maxDepth(struct TreeNode *root) {
	
	int ld = 0;
	int rd = 0;
	if (NULL == root) return 0;
	if (root-&gt;left) ld = maxDepth(root-&gt;left);	// 左子树存在进行左递归
	if (root-&gt;right) rd = maxDepth(root-&gt;right);	// 右子树存在进行右递归
	return 1 + ((ld &gt; rd) ? ld : rd);		// 本层递归结束比较左右子树的深度取大者相加
}
</code></pre>
<h2 id="对称二叉树">对称二叉树</h2>
<p>给定一个二叉树，检查它是否是镜像对称的。</p>
<p>例如，二叉树 <code>[1,2,2,3,4,4,3]</code> 是对称的。</p>
<pre><code>    1
   / \
  2   2
 / \ / \
3  4 4  3
</code></pre>
<p>但是下面这个 <code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p>
<pre><code>    1
   / \
  2   2
   \   \
   3    3
</code></pre>
<p><strong>代码</strong>:</p>
<pre><code class="language-c">bool recursion(struct TreeNode* left, struct TreeNode* right) {
	
	// 如果左子树和右子树均为空 返回真
	if (NULL == left &amp;&amp; NULL == right) return true;
	else if (left == NULL || right == NULL) {
		// 其中一个不为空 返回假
		return false;
	}

	// 左结点的值是否等于右结点的值
	bool c1 = (left-&gt;val == right-&gt;val);
	// 左结点的左子树是否等于右结点的右子树
	bool c2 = recursion(left-&gt;left, right-&gt;right);
	// 左结点的右子树是否等于右结点的左子树
	bool c3 = recursion(left-&gt;right, right-&gt;left);
	// 如果同时成立
	if (c1&amp;&amp;c2&amp;&amp;c3) {
		return true;
	}
	else {
		return false;
	}
}

bool isSymmetric(struct TreeNode* root) {
	// 根 为空 返回正确
	if (root == NULL) {
		return true;
	}
	return recursion(root-&gt;left, root-&gt;right);
}
</code></pre>
<h2 id="路径总和">路径总和</h2>
<p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p>
<p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p>
<p><strong>示例:</strong><br>
给定如下二叉树，以及目标和 <code>sum = 22</code>，</p>
<pre><code>              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
</code></pre>
<p>返回 <code>true</code>, 因为存在目标和为 22 的根节点到叶子节点的路径 <code>5-&gt;4-&gt;11-&gt;2</code>。</p>
<p><strong>代码</strong>:</p>
<pre><code class="language-c">bool hasPathSum(struct TreeNode* root, int sum) {

	if (NULL == root) return false;

	// 保证该结点为叶子结点的前提下 ，判断此时的sum是否和结点的值相等
	if (root-&gt;val == sum &amp;&amp; NULL == root-&gt;left &amp;&amp; NULL == root-&gt;right)
		return true;

	// 递归向下层遍历，出错直接执行 false
	if (hasPathSum(root-&gt;left, sum - root-&gt;val) || hasPathSum(root-&gt;right, sum - root-&gt;val))
		return true;

	return false;

}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链式存储二叉树的遍历]]></title>
        <id>https://lizonglin313.github.io/post/lian-shi-cun-chu-er-cha-shu-de-bian-li</id>
        <link href="https://lizonglin313.github.io/post/lian-shi-cun-chu-er-cha-shu-de-bian-li">
        </link>
        <updated>2020-05-29T08:27:12.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>先序遍历，中序遍历，后序遍历以及层次遍历。</p>
<p>使用递归、队列。</p>
<p>整理自Leetcode。</p>
</blockquote>
<h2 id="说明">说明</h2>
<p>使用到的树结点类型为：</p>
<pre><code class="language-c">struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};
</code></pre>
<h2 id="先序遍历">先序遍历</h2>
<p>给定一个二叉树，返回它的 <em>前序</em> 遍历。</p>
<p><strong>示例:</strong></p>
<pre><code>输入: [1,null,2,3]  
   1
    \
     2
    /
   3 

输出: [1,2,3]
</code></pre>
<p><strong>代码</strong>:</p>
<pre><code class="language-c">/*求二叉树数据个数，用于动态申请空间*/
int size(struct TreeNode* root)
{
	if (!root) return 0;
	return size(root-&gt;left) + size(root-&gt;right) + 1;	// 递归求二叉树的个数
}
/*递归进行先序遍历*/
void PreOrder(struct TreeNode *root, int *ret, int *retIndex) {
	if (root == NULL) {
		return;
	}
	ret[(*retIndex)++] = root-&gt;val;			// 根
	PreOrder(root-&gt;left, ret, retIndex);	// 左
	PreOrder(root-&gt;right, ret, retIndex);	// 右
}

int* preorderTraversal(struct TreeNode* root, int* returnSize) {

    int treesize = size(root);		// 树结点数量
	int retIndex = 0;				// 数组索引
	int *ret = (int*)malloc(sizeof(int) * treesize);	// 申请空间
	memset(ret, 0, treesize);		// 置零

	PreOrder(root, ret, &amp;retIndex);		// 先序遍历
	*returnSize = retIndex;

	return ret;

}
</code></pre>
<h2 id="中序遍历">中序遍历</h2>
<p>给定一个二叉树，返回它的<em>中序</em> 遍历。</p>
<p><strong>示例:</strong></p>
<pre><code>输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]
</code></pre>
<p><strong>代码</strong>:</p>
<pre><code class="language-c">int size(struct TreeNode* root)/*求二叉树数据个数*/
{
   if(!root) return 0;
   return size(root-&gt;left)+size(root-&gt;right)+1;
}

void inorder(struct TreeNode* root, int *ret, int* retIndex)/*中序遍历二叉树*/
{
	if (root == NULL) return;

	inorder(root-&gt;left, ret, retIndex);
	ret[(*retIndex)++] = root-&gt;val;
	inorder(root-&gt;right, ret, retIndex);
}

int* inorderTraversal(struct TreeNode* root, int* returnSize) {
    
	int treesize = size(root);
    int retIndex = 0;
	int *ret = (int*)malloc(treesize * sizeof(int));
	memset(ret, 0, treesize);
	
	inorder(root, ret, &amp;retIndex);
    *returnSize = retIndex;
     
    return ret;
}

</code></pre>
<h2 id="后序遍历">后序遍历</h2>
<p>给定一个二叉树，返回它的 <em>后序</em> 遍历。</p>
<p><strong>示例:</strong></p>
<pre><code>输入: [1,null,2,3]  
   1
    \
     2
    /
   3 

输出: [3,2,1]
</code></pre>
<p><strong>代码</strong>:</p>
<pre><code class="language-c">int size(struct TreeNode* root)/*求二叉树数据个数*/
{
   if(!root) return 0;
   return size(root-&gt;left)+size(root-&gt;right)+1;
}

void postorder(struct TreeNode* root, int *ret, int* retIndex)/*中序遍历二叉树*/
{
	if (root == NULL) return;

	postorder(root-&gt;left, ret, retIndex);
	postorder(root-&gt;right, ret, retIndex);
    ret[(*retIndex)++] = root-&gt;val;

}

int* postorderTraversal(struct TreeNode* root, int* returnSize){
    int treesize = size(root);
    int retIndex = 0;
	int *ret = (int*)malloc(treesize * sizeof(int));
	memset(ret, 0, treesize);
	
	postorder(root, ret, &amp;retIndex);
    *returnSize = retIndex;
    return ret;
}
</code></pre>
<h2 id="先序-中序-后序">先序、中序、后序</h2>
<p>显然，对于三种遍历方式，在递归实现中，唯一的不同是递归函数中<code>ret[(*retIndex)++] = root-&gt;val</code>语句的位置:</p>
<pre><code class="language-c">void order(struct TreeNode* root, int *ret, int* retIndex)
{
	if (root == NULL) return;

    //ret[(*retIndex)++] = root-&gt;val;
	postorder(root-&gt;left, ret, retIndex);
	//ret[(*retIndex)++] = root-&gt;val;
    postorder(root-&gt;right, ret, retIndex);
    //ret[(*retIndex)++] = root-&gt;val;

}
</code></pre>
<p>所以，对于三种遍历方式，我们可以统一写为：</p>
<pre><code class="language-c">/*递归求树结点的个数*/
int size(struct TreeNode *root){
    if(!root) return 0;
    return size(root-&gt;left) + size(root-&gt;right) + 1;
}
/**/
void order(struct TreeNode *root, int *ret, int *retIndex, METHOD){
    if(root==NULL) return 0;
    if(METHOD is preorder){
        
        ret[(*resIndex++)] = root-&gt;val;
        order(root-&gt;left, ret, retIndex, METHOD);
        order(root-&gt;right, ret, retIndex, METHOD);
    
    }else if(METHOD is inorder){
    
        order(root-&gt;left, ret, retIndex, METHOD);
        ret[(*resIndex++)] = root-&gt;val;
        order(root-&gt;right, ret, retIndex, METHOD);
    
    }else if(METHOD is lastorder){
    
        order(root-&gt;left, ret, retIndex, METHOD);
        order(root-&gt;right, ret, retIndex, METHOD);
        ret[(*resIndex++)] = root-&gt;val;
    
    }
}

int *orderTraversal(struct TreeNode *root, int *treeSize, METHOD){
    int treesize = size(root);
    int retIndex = 0;
    int *ret = (int*)malloc(sizeof(int)*treesize);
    memset(ret, 0, treesize);
    order(root, ret, &amp;retIndex, METHOD);
    *returnSize = retIndex;
    return ret;
}
</code></pre>
<h2 id="层次遍历">层次遍历</h2>
<p>给你一个二叉树，请你返回其按 <strong>层序遍历</strong> 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p>
<p><strong>示例：</strong><br>
二叉树：<code>[3,9,20,null,null,15,7]</code>,</p>
<pre><code>    3
   / \
  9  20
    /  \
   15   7
</code></pre>
<p>返回其层次遍历结果：</p>
<pre><code>[
  [3],
  [9,20],
  [15,7]
]
</code></pre>
<p><strong>代码</strong>:</p>
<blockquote>
<p>作者：r0vHWU5AdJ<br>
链接：https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/chun-cchuang-jian-dui-lie-shi-xian-er-cha-shu-de-c/<br>
来源：力扣（LeetCode）<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<pre><code class="language-c">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

//创建队列
//1,构建队列，实现压入和弹出函数 Push_Queue 和 Pop_Queue
//2,利用队列先进先出的特性实现二叉树的层序遍历
//3,将二叉树根 root 压入队列，并将 NULL 作为每层的区分节点也压入队列
//4,从队列中读出节点，保存当前节点的值，并且将左右支分别压入队列
//5,遇到层的区分节点则处理下一层，直到队列为空

#define     MAX_LEVEL       1000

//声明队列节点结构
struct QueueNode {
    struct TreeNode* pTreeNode;     //队列元素：二叉树节点指针
    struct TreeNodeQueue* pNext;    //队列元素：下一个节点指针
};

//声明队列结构
struct TreeNodeQueue {
    int     iNum;                   //队列元素个数
    struct QueueNode*   pHead;      //队列头指针
    struct QueueNode*   pTail;      //队列尾指针
};

//函数一：向队列中增加元素
bool Push_Queue(struct TreeNodeQueue* pQueue, struct TreeNode* pTreeNode){
    struct QueueNode*   pQueueNode = NULL;

    if(NULL == pQueue) return false;

    pQueueNode = (struct QueueNode*)malloc(sizeof(struct QueueNode));
    pQueueNode-&gt;pTreeNode = pTreeNode;
    pQueueNode-&gt;pNext = NULL;

    if(0 == pQueue-&gt;iNum)
    {
        pQueue-&gt;pHead = pQueueNode;
        pQueue-&gt;pTail = pQueueNode;
        pQueue-&gt;iNum += 1;
    }
    else
    {
        pQueue-&gt;pTail-&gt;pNext = pQueueNode;
        pQueue-&gt;pTail = pQueueNode;
        pQueue-&gt;iNum += 1;
    }

    return true;
}

//函数二：从队列中取出元素
struct TreeNode* Pop_Queue(struct TreeNodeQueue* pQueue){
    struct TreeNode*    pRet    = NULL;
    struct QueueNode*   pTmp    = NULL;

    if((NULL == pQueue) || (0 == pQueue-&gt;iNum)) return NULL;

    pRet = pQueue-&gt;pHead-&gt;pTreeNode;

    pQueue-&gt;iNum -= 1;
    if(0 == pQueue-&gt;iNum)
    {
        free(pQueue-&gt;pHead);
        pQueue-&gt;pHead = NULL;
        pQueue-&gt;pTail = NULL;
    }
    else
    {
        pTmp = pQueue-&gt;pHead-&gt;pNext;
        free(pQueue-&gt;pHead);
        pQueue-&gt;pHead = pTmp;
    }
    
    return pRet;
}

int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){
    int         iNum        = 0;
    int         iRetSize    = 0;
    int**       pRet        = NULL;
    int*        pRetCol     = NULL;
    
    struct TreeNodeQueue  	strQueue;
    struct TreeNode* 		pTmpNode = NULL;

    //1.申请空间,并初始化
    pRet = (int**)malloc(sizeof(int*) * MAX_LEVEL);
    memset(pRet, 0x00, sizeof(int*) * MAX_LEVEL);
    pRetCol = (int*)malloc(sizeof(int) * MAX_LEVEL);
    memset(pRetCol, 0x00, sizeof(int) * MAX_LEVEL);
    memset(&amp;strQueue, 0x00, sizeof(struct TreeNodeQueue));

    //2.特殊处理
    if(NULL == root)
    {
        *returnSize = iRetSize;
        *returnColumnSizes = pRetCol;
        return pRet;
    }

    //3.将二叉树根节点加入队列,并且加入空节点作为每层的区分节点
    Push_Queue(&amp;strQueue, root);
    pRet[iRetSize] = (int*)malloc(sizeof(int) * strQueue.iNum);
    Push_Queue(&amp;strQueue, NULL);

    //4.处理队列中的二叉树节点，直到队列为空
    while(strQueue.iNum != 0)
    {
        pTmpNode = Pop_Queue(&amp;strQueue);
        if(NULL == pTmpNode)
        {
            if(0 != strQueue.iNum)
            {
                //6.当前层处理完，进入下一层
                iRetSize += 1;
                pRet[iRetSize] = (int*)malloc(sizeof(int) * strQueue.iNum);

                Push_Queue(&amp;strQueue, NULL);
            }
        }
        else
        {
            //5.处理当前层的节点，分别将左右支压入队列
            pRet[iRetSize][pRetCol[iRetSize]] = pTmpNode-&gt;val;
            pRetCol[iRetSize] += 1;

            if(NULL != pTmpNode-&gt;left)
            {
                Push_Queue(&amp;strQueue, pTmpNode-&gt;left);
            }
            if(NULL != pTmpNode-&gt;right)
            {
                Push_Queue(&amp;strQueue, pTmpNode-&gt;right);
            }
        }
    }

    //7.返回
    *returnSize = iRetSize + 1;
    *returnColumnSizes = pRetCol;
    return pRet;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[leetcode链表初等整理]]></title>
        <id>https://lizonglin313.github.io/post/leetcode-lian-biao-chu-deng-zheng-li</id>
        <link href="https://lizonglin313.github.io/post/leetcode-lian-biao-chu-deng-zheng-li">
        </link>
        <updated>2020-05-25T12:39:37.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>力扣关于链表这部分基础算法还是较为简单和基础的</p>
<p>没有特殊说明的情况下，链表节点类型为：</p>
<pre><code class="language-c">struct ListNode {
    int val;
    struct ListNode *next;
};
</code></pre>
<p>同时，需要注意，默认的头指针<code>head-&gt;val</code>域即第一个元素。</p>
</blockquote>
<h2 id="删除链表中的节点">删除链表中的节点</h2>
<p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p>
<p>现有一个链表 -- head = [4,5,1,9]，它可以表示为:</p>
<figure data-type="image" tabindex="1"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/237_example.png" alt="img" loading="lazy"></figure>
<p><strong>示例 1:</strong></p>
<pre><code>输入: head = [4,5,1,9], node = 5
输出: [4,1,9]
解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: head = [4,5,1,9], node = 1
输出: [4,5,9]
解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.
</code></pre>
<p><strong>说明:</strong></p>
<ul>
<li>链表至少包含两个节点。</li>
<li>链表中所有节点的值都是唯一的。</li>
<li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li>
<li>不要从你的函数中返回任何结果。</li>
</ul>
<p><strong>代码</strong>:</p>
<p>这个题目很容易理解偏差。其实就是让你把给你的节点删掉罢了。</p>
<pre><code class="language-c">void deleteNode(struct ListNode* node) {
	node-&gt;val = node-&gt;next-&gt;val;
	node-&gt;next = node-&gt;next-&gt;next;
}
</code></pre>
<h2 id="删除链表的倒数第n个节点">删除链表的倒数第N个节点</h2>
<p>给定一个链表，删除链表的倒数第 <em>n</em> 个节点，并且返回链表的头结点。</p>
<p><strong>示例：</strong></p>
<pre><code>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.

当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.
</code></pre>
<p><strong>说明：</strong></p>
<p>给定的 <em>n</em> 保证是有效的。</p>
<p><strong>进阶：</strong></p>
<p>你能尝试使用一趟扫描实现吗？</p>
<p><strong>代码</strong>:</p>
<p>采用快慢指针的思路。设置指针<code>p</code>和<code>q</code>：</p>
<ul>
<li>一开始，<code>p</code>和<code>q</code>都指向头节点；</li>
<li><code>q</code>指针现后移至<code>p</code>指针后的第<code>n</code>个位置，也就是<code>q</code>指针始终比<code>p</code>指针快<code>n</code>个，需要注意如果<code>q</code>还未移动<code>n</code>就已经是<code>NULL</code>了那么删去头节点就结束了；</li>
<li><code>p=p-&gt;next</code>同时<code>q=q-&gt;next</code>直到<code>q-&gt;next==NULL</code>，此时<code>p-&gt;next</code>就是要删除的节点。</li>
</ul>
<pre><code class="language-c">struct ListNode* removeNthFromEnd(struct ListNode* head, int n) {

    struct ListNode *p, *q;
	p = head; q = head;

	int i;
	for (i = 0; i &lt; n; i++) {
		if (q-&gt;next == NULL) {
			head = head-&gt;next;
			return head;
		}
		q = q-&gt;next;
	}

	while (q-&gt;next!=NULL) {
		q = q-&gt;next;
		p = p-&gt;next;
	}
    
	p-&gt;next = p-&gt;next-&gt;next;
    
	return head;
}
</code></pre>
<h2 id="反转链表">反转链表</h2>
<p>反转一个单链表。</p>
<p><strong>示例:</strong></p>
<pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL
输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL
</code></pre>
<p><strong>进阶:</strong><br>
你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p>
<p><strong>代码</strong>:</p>
<p>三指针原地逆转。</p>
<pre><code class="language-c">struct ListNode* reverseList(struct ListNode* head) {
	
	if (head == NULL) return NULL;

	struct ListNode *h,*p,*c;

	h = head;
	p = h-&gt;next;

	// 如果此时只有一个节点
	if (p == NULL) return head;

	c = p-&gt;next;

	// 如果只有两个节点
	if (c == NULL) {
		p-&gt;next = h;
		h-&gt;next = NULL;
		return p;
	}

	// 三节点及以上情况
	while (c != NULL) {
		p-&gt;next = h;
		h = p;
		p = c;
		c = c-&gt;next;
	}
	p-&gt;next = h;
	head-&gt;next = NULL;
	head = p;

	return head;

}
</code></pre>
<h2 id="合并两个有序链表">合并两个有序链表</h2>
<p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>
<p><strong>示例：</strong></p>
<pre><code>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4
输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4
</code></pre>
<p><strong>代码</strong>:</p>
<p>判断大小拆指针重连。</p>
<pre><code class="language-c">struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){

    if (l1 == NULL &amp;&amp; l2 == NULL) return NULL;
	if (l1 == NULL &amp;&amp; l2 != NULL) return l2;
	if (l1 != NULL &amp;&amp; l2 == NULL) return l1;
    
   struct ListNode *p1, *p2, *newhead, *q;
	p1 = l1;
	p2 = l2;
	newhead = (l1-&gt;val &lt;= l2-&gt;val) ? l1 : l2;
	q = newhead;

	if (newhead == p1) p1 = p1-&gt;next;
	else p2 = p2-&gt;next;

	while (p1&amp;&amp;p2) {
		if (p1-&gt;val &lt;= p2-&gt;val) {
			q-&gt;next = p1;
			p1 = p1-&gt;next;
			q = q-&gt;next;
		}
		else {
			q-&gt;next = p2;
			p2 = p2-&gt;next;
			q = q-&gt;next;
		}
	}

	if (p1) q-&gt;next = p1;
	if (p2) q-&gt;next = p2;

	return newhead;

}
</code></pre>
<h2 id="回文链表">回文链表</h2>
<p>请判断一个链表是否为回文链表。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: 1-&gt;2
输出: false
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: 1-&gt;2-&gt;2-&gt;1
输出: true
</code></pre>
<p><strong>进阶：</strong><br>
你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p>
<p><strong>代码</strong>:</p>
<p>将链表数值写入数组，然后判断数组是否是回文数组。</p>
<pre><code class="language-c">bool isPalindrome(struct ListNode* head) {

	if (head == NULL || head-&gt;next == NULL) return true;

	// 计算链表长度
	struct ListNode *p = head;
	int len = 0;
	while (p) {
		p = p-&gt;next;
		len++;
	}

	// 将链表复制到数组中
	int *temparr = (int*)malloc(sizeof(int)*len);
	int i = 0;
	for (p = head; i &lt; len; i++) {
		temparr[i] = p-&gt;val;
		p = p-&gt;next;
	}

	// 判断数组
	int q = 0;
	bool ispld = true;
	for (; q &lt; (len - q - 1); q++) {
		if (temparr[q] != temparr[len - q - 1]) {
			ispld = false;
			break;
		}
	}
	return ispld;

}
</code></pre>
<h2 id="环形链表">环形链表</h2>
<p>给定一个链表，判断链表中是否有环。</p>
<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p>
<p><strong>示例 1：</strong></p>
<pre><code>输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="img" loading="lazy"></figure>
<p><strong>示例 2：</strong></p>
<pre><code>输入：head = [1,2], pos = 0
输出：true
解释：链表中有一个环，其尾部连接到第一个节点。
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img" loading="lazy"></figure>
<p><strong>示例 3：</strong></p>
<pre><code>输入：head = [1], pos = -1
输出：false
解释：链表中没有环。
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img" loading="lazy"></figure>
<p><strong>进阶：</strong></p>
<p>你能用 <em>O(1)</em>（即，常量）内存解决此问题吗？</p>
<p><strong>代码</strong>:</p>
<p>使用快慢指针。始终有<code>p=p-&gt;next</code>同时<code>q=q-&gt;next-&gt;next</code>，这样可以保证如果链表中有环，指针<code>p</code>和<code>q</code>一定能相遇。</p>
<pre><code class="language-c">bool hasCycle(struct ListNode *head) {

	struct ListNode *p, *q;
	p = head;
	q = head;
	
	if (p == NULL) return false;
	
	while (p!=NULL&amp;&amp;q!=NULL) {
        if(q-&gt;next==NULL)return false;
        if(q-&gt;next-&gt;next==NULL)return false;
		p = p-&gt;next;
		q = q-&gt;next-&gt;next;
		if (p == q) {
			return true;
		}
	}
	return false;

}
</code></pre>
]]></content>
    </entry>
</feed>